%{
open System
open Microsoft.FSharp.Text.Parsing
open Absyn

type ParseError =
    { position: Position * Position
      stateStack: int list
      message: string }
let errors = new System.Threading.ThreadLocal<_>(fun x -> new System.Collections.Generic.List<ParseError>())
let clearErrors () = errors.Value.Clear()
let addError e = errors.Value.Add(e)

let parse_error_rich = Some (fun (ctx: ParseErrorContext<_>) ->
    { position = ctx.ParseState.ResultRange
      stateStack = ctx.StateStack
      message = ctx.Message }
    |> addError)

let pos (parseState: IParseState, startIdx, endIdx) =
    (parseState.InputStartPosition startIdx, parseState.InputEndPosition endIdx)

let input<'a> (parseState: IParseState, idx) =
    (unbox<'a>(parseState.GetInput(idx)), parseState.InputRange(idx))

type ExpsItem =
    | ExpItem of ExpPos
    | StmtItem of ExpPos

type LvalueTail =
    | Field of Symbol
    | Subscript of ExpPos

let opexp (oper, parseState: IParseState) = 
    OpExp { left = downcast (parseState.GetInput(1)), parseState.InputRange(1)
            oper = oper
            right = downcast (parseState.GetInput(3)), parseState.InputRange(3)
            pos = pos (parseState, 1, 3) }

let ifelseexp (test, then', else', pos) =
    IfExp { test = test; then' = then'; else' = Some(else'); pos = pos }
%}

%token EOF
    WHILE FOR TO BREAK VAR FN TYPE NEW IF ELSE NULL TRUE FALSE
    COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK LBRACE RBRACE DOT
    PLUS MINUS TIMES DIVIDE ASSIGN EQ NEQ LT LE GT GE ANDALSO ORELSE ARROW
%token <string> ID
%token <int> INT
%token <string> STRING

%start start
%type <Absyn.Program> start

%nonassoc ANDALSO ORELSE
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%%

start: prog EOF { $1 }

prog: exps { $1 }

exps: { [] }
| exps_ { $1 }

exp2: exp { $1 }
| { VoidExp }

exps_: exp2 { [input(parseState, 1)] }
| exp2 SEMICOLON exps_ { input(parseState, 1) :: $3 }
| error SEMICOLON exps_ { (ErrExp, parseState.InputRange(1)) :: $3 }

dec: tydecs { TypeDec $1 }
| vardec { VarDec $1 }
| fundecs { FunDec $1 }

tydec: TYPE ID ASSIGN ty { { name = input(parseState, 2); ty = $4; pos = pos(parseState, 1, 4) } }

tydecs: tydec { [$1] }
| tydec tydecs { $1 :: $2 }

tyid: ID { SimpleTyId(input(parseState, 1)) }
| tyid LBRACK RBRACK { ArrayTyId $1 }

ty: tyid { NameTy $1 }
| LBRACE tyfields RBRACE { RecordTy $2 }

tyfield: ID COLON tyid { { name = input(parseState, 1); escape = ref true; typ = $3; pos = pos(parseState, 1, 3) } }

tyfields_: tyfield { [$1] }
| tyfield COMMA tyfields_ { $1 :: $3 }

tyfields: { [] }
| tyfields_ { $1 }

vardec: VAR ID ASSIGN exp { { name = $2; escape = ref true; typ = None; init = input(parseState, 4); pos = pos(parseState, 1, 4) } }
| VAR ID COLON tyid ASSIGN exp { { name = $2; escape = ref true; typ = Some($4); init = input(parseState, 6); pos = pos(parseState, 1, 6) } }

fundec: FN ID LPAREN tyfields RPAREN exp { { name = input(parseState, 2); params' = $4; result = None; body = input(parseState, 6); pos = pos(parseState, 1, 6) } }
| FN ID LPAREN tyfields RPAREN ARROW tyid exp { { name = input(parseState, 2); params' = $4; result = Some($7); body = input(parseState, 8); pos = pos(parseState, 1, 8) } }

fundecs: fundec { [$1] }
| fundec fundecs { $1 :: $2 }

lvalue: ID lvalue_tail {
    let startPos = parseState.InputStartPosition(1)
    let rec varexp (left, xs) =
        match xs with
        | right :: tail ->
            let newleft =
                match right with
                | Field((_, (p, _)) as symbol) -> FieldVar((left, (startPos, p)), symbol)
                | Subscript((_, (p, _)) as exp) -> SubscriptVar((left, (startPos, p)), exp)
            varexp(newleft, tail)
        | [] -> left
    varexp(SimpleVar($1, parseState.InputRange(1)), $2)
}

lvalue_tail: { [] }
| DOT ID lvalue_tail { Field(input(parseState, 2)) :: $3 }
| LBRACK exp RBRACK lvalue_tail { Subscript(input(parseState, 2)) :: $4 }

exp: lvalue { VarExp $1 }
| NULL { NullExp }
| LBRACE exps RBRACE { SeqExp $2 }
| TRUE { IntExp 1 }
| FALSE { IntExp 0 }
| INT { IntExp $1 }
| MINUS exp %prec UMINUS
    {
        match $2 with
        | IntExp(x) -> IntExp(-x)
        | x -> NegateExp(x, pos(parseState, 1, 2))
    }
| STRING { StringExp $1 }
| ID LPAREN parameters RPAREN { CallExp { func = input(parseState, 1); args = $3; pos = pos(parseState, 1, 4) } }
| exp PLUS exp { opexp(PlusOp, parseState) }
| exp MINUS exp { opexp(MinusOp, parseState) }
| exp TIMES exp { opexp(TimesOp, parseState) }
| exp DIVIDE exp { opexp(DivideOp, parseState) }
| exp EQ exp { opexp(EqOp, parseState) }
| exp NEQ exp { opexp(NeqOp, parseState) }
| exp LT exp { opexp(LtOp, parseState) }
| exp LE exp { opexp(LeOp, parseState) }
| exp GT exp { opexp(GtOp, parseState) }
| exp GE exp { opexp(GeOp, parseState) }
| exp ANDALSO exp { ifelseexp(input(parseState, 1), $3, IntExp 0, pos(parseState, 1, 3)) }
| exp ORELSE exp { ifelseexp(input(parseState, 1), IntExp 1, $3, pos(parseState, 1, 3)) }
| NEW ID LBRACE record_fields RBRACE { RecordExp { fields = $4; typ = $2, pos(parseState, 2, 2); pos = pos(parseState, 1, 5) } }
| NEW tyid LBRACK exp RBRACK { ArrayExp { typ = ArrayTyId($2); size = input(parseState, 4); pos = pos(parseState, 1, 5) } }
| lvalue ASSIGN exp { AssignExp { var = $1; exp = $3; pos = pos(parseState, 1, 3) } }
| IF LPAREN exp RPAREN exp ELSE exp { ifelseexp(($3, pos(parseState, 3, 3)), $5, $7, pos(parseState, 1, 7)) }
| IF LPAREN exp RPAREN exp { IfExp { test = ($3, pos(parseState, 3, 3)); then' = $5; else' = None; pos = pos(parseState, 1, 5) } }
| WHILE LPAREN exp RPAREN exp { WhileExp { test = input(parseState, 3); body = $5; pos = pos(parseState, 1, 5) } }
| FOR LPAREN ID ASSIGN exp TO exp RPAREN exp { ForExp { var = $3; escape = ref true; lo = input(parseState, 5); hi = input(parseState, 7); body = $9; pos = pos(parseState, 1, 9) } }
| BREAK { BreakExp(parseState.InputRange(1)) }
| LPAREN exp RPAREN { $2 }
| dec { DecExp $1 }
| LPAREN error RPAREN { ErrExp }
| LBRACE error RBRACE { ErrExp }

parameters_: exp { [input(parseState, 1)] }
| exp COMMA parameters_ { input(parseState, 1) :: $3 }

parameters: { [] }
| parameters_ { $1 }

record_field: ID ASSIGN exp { input(parseState, 1), input(parseState, 3) }

record_fields_: record_field { [$1] }
| record_field COMMA record_fields_ { $1 :: $3 }

record_fields: { [] }
| record_fields_ { $1 }
