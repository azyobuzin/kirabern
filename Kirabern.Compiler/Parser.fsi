// Signature file for parser generated by fsyacc
module Parser
type token = 
  | STRING of (string)
  | INT of (int)
  | ID of (string)
  | EOF
  | WHILE
  | FOR
  | TO
  | BREAK
  | VAR
  | FN
  | TYPE
  | NEW
  | IF
  | ELSE
  | NULL
  | TRUE
  | FALSE
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | ANDALSO
  | ORELSE
  | ARROW
type tokenId = 
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_EOF
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_TO
    | TOKEN_BREAK
    | TOKEN_VAR
    | TOKEN_FN
    | TOKEN_TYPE
    | TOKEN_NEW
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_NULL
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_ASSIGN
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_ANDALSO
    | TOKEN_ORELSE
    | TOKEN_ARROW
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_exps
    | NONTERM_exp2
    | NONTERM_exps_
    | NONTERM_dec
    | NONTERM_tydec
    | NONTERM_tydecs
    | NONTERM_tyid
    | NONTERM_ty
    | NONTERM_tyfield
    | NONTERM_tyfields_
    | NONTERM_tyfields
    | NONTERM_vardec
    | NONTERM_fundec
    | NONTERM_fundecs
    | NONTERM_lvalue
    | NONTERM_lvalue_tail
    | NONTERM_exp
    | NONTERM_parameters_
    | NONTERM_parameters
    | NONTERM_record_field
    | NONTERM_record_fields_
    | NONTERM_record_fields
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Absyn.Program) 
