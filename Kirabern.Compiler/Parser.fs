// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Microsoft.FSharp.Text.Parsing
open Absyn

let parse_error_rich = Some (fun (ctx: ParseErrorContext<_>) ->
    let pos = ctx.ParseState.InputStartPosition 1
    printfn "Error %d:%d" pos.Line pos.Column
    printfn "StateStack: %s" (String.Join(" ", ctx.StateStack))
)

let pos (parseState: IParseState, startIdx, endIdx) =
    (parseState.InputStartPosition startIdx, parseState.InputEndPosition endIdx)

type ExpsItem =
    | ExpItem of (Exp * Pos)
    | StmtItem of (Exp * Pos)

type LvaluePostfix =
    | Field of Symbol * Pos
    | Subscript of Exp * Pos

let opexp (left, oper, right, parseState) =
    OpExp { left = left; oper = oper; right = right; pos = pos(parseState, 1, 3) }

let ifelseexp (test, then', else', pos) =
    IfExp { test = test; then' = then'; else' = Some(else'); pos = pos }

# 35 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | STRING of (string)
  | INT of (int)
  | ID of (string)
  | EOF
  | WHILE
  | FOR
  | TO
  | BREAK
  | VAR
  | FN
  | TYPE
  | NEW
  | IF
  | ELSE
  | NULL
  | TRUE
  | FALSE
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | ANDALSO
  | ORELSE
  | ARROW
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_EOF
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_TO
    | TOKEN_BREAK
    | TOKEN_VAR
    | TOKEN_FN
    | TOKEN_TYPE
    | TOKEN_NEW
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_NULL
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_ASSIGN
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_ANDALSO
    | TOKEN_ORELSE
    | TOKEN_ARROW
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_exps
    | NONTERM_exps_
    | NONTERM_exps_item
    | NONTERM_dec
    | NONTERM_tydec
    | NONTERM_tydecs
    | NONTERM_tyid
    | NONTERM_ty
    | NONTERM_tyfield
    | NONTERM_tyfields_
    | NONTERM_tyfields
    | NONTERM_vardec
    | NONTERM_fundec
    | NONTERM_fundecs
    | NONTERM_lvalue
    | NONTERM_lvalue_tail
    | NONTERM_exp
    | NONTERM_parameters_
    | NONTERM_parameters
    | NONTERM_record_field
    | NONTERM_record_fields_
    | NONTERM_record_fields

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | STRING _ -> 0 
  | INT _ -> 1 
  | ID _ -> 2 
  | EOF  -> 3 
  | WHILE  -> 4 
  | FOR  -> 5 
  | TO  -> 6 
  | BREAK  -> 7 
  | VAR  -> 8 
  | FN  -> 9 
  | TYPE  -> 10 
  | NEW  -> 11 
  | IF  -> 12 
  | ELSE  -> 13 
  | NULL  -> 14 
  | TRUE  -> 15 
  | FALSE  -> 16 
  | COMMA  -> 17 
  | COLON  -> 18 
  | SEMICOLON  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LBRACK  -> 22 
  | RBRACK  -> 23 
  | LBRACE  -> 24 
  | RBRACE  -> 25 
  | DOT  -> 26 
  | PLUS  -> 27 
  | MINUS  -> 28 
  | TIMES  -> 29 
  | DIVIDE  -> 30 
  | ASSIGN  -> 31 
  | EQ  -> 32 
  | NEQ  -> 33 
  | LT  -> 34 
  | LE  -> 35 
  | GT  -> 36 
  | GE  -> 37 
  | ANDALSO  -> 38 
  | ORELSE  -> 39 
  | ARROW  -> 40 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_STRING 
  | 1 -> TOKEN_INT 
  | 2 -> TOKEN_ID 
  | 3 -> TOKEN_EOF 
  | 4 -> TOKEN_WHILE 
  | 5 -> TOKEN_FOR 
  | 6 -> TOKEN_TO 
  | 7 -> TOKEN_BREAK 
  | 8 -> TOKEN_VAR 
  | 9 -> TOKEN_FN 
  | 10 -> TOKEN_TYPE 
  | 11 -> TOKEN_NEW 
  | 12 -> TOKEN_IF 
  | 13 -> TOKEN_ELSE 
  | 14 -> TOKEN_NULL 
  | 15 -> TOKEN_TRUE 
  | 16 -> TOKEN_FALSE 
  | 17 -> TOKEN_COMMA 
  | 18 -> TOKEN_COLON 
  | 19 -> TOKEN_SEMICOLON 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LBRACK 
  | 23 -> TOKEN_RBRACK 
  | 24 -> TOKEN_LBRACE 
  | 25 -> TOKEN_RBRACE 
  | 26 -> TOKEN_DOT 
  | 27 -> TOKEN_PLUS 
  | 28 -> TOKEN_MINUS 
  | 29 -> TOKEN_TIMES 
  | 30 -> TOKEN_DIVIDE 
  | 31 -> TOKEN_ASSIGN 
  | 32 -> TOKEN_EQ 
  | 33 -> TOKEN_NEQ 
  | 34 -> TOKEN_LT 
  | 35 -> TOKEN_LE 
  | 36 -> TOKEN_GT 
  | 37 -> TOKEN_GE 
  | 38 -> TOKEN_ANDALSO 
  | 39 -> TOKEN_ORELSE 
  | 40 -> TOKEN_ARROW 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_exps 
    | 4 -> NONTERM_exps 
    | 5 -> NONTERM_exps_ 
    | 6 -> NONTERM_exps_ 
    | 7 -> NONTERM_exps_item 
    | 8 -> NONTERM_exps_item 
    | 9 -> NONTERM_dec 
    | 10 -> NONTERM_dec 
    | 11 -> NONTERM_dec 
    | 12 -> NONTERM_tydec 
    | 13 -> NONTERM_tydecs 
    | 14 -> NONTERM_tydecs 
    | 15 -> NONTERM_tyid 
    | 16 -> NONTERM_tyid 
    | 17 -> NONTERM_ty 
    | 18 -> NONTERM_ty 
    | 19 -> NONTERM_tyfield 
    | 20 -> NONTERM_tyfields_ 
    | 21 -> NONTERM_tyfields_ 
    | 22 -> NONTERM_tyfields 
    | 23 -> NONTERM_tyfields 
    | 24 -> NONTERM_vardec 
    | 25 -> NONTERM_vardec 
    | 26 -> NONTERM_fundec 
    | 27 -> NONTERM_fundec 
    | 28 -> NONTERM_fundecs 
    | 29 -> NONTERM_fundecs 
    | 30 -> NONTERM_lvalue 
    | 31 -> NONTERM_lvalue_tail 
    | 32 -> NONTERM_lvalue_tail 
    | 33 -> NONTERM_lvalue_tail 
    | 34 -> NONTERM_exp 
    | 35 -> NONTERM_exp 
    | 36 -> NONTERM_exp 
    | 37 -> NONTERM_exp 
    | 38 -> NONTERM_exp 
    | 39 -> NONTERM_exp 
    | 40 -> NONTERM_exp 
    | 41 -> NONTERM_exp 
    | 42 -> NONTERM_exp 
    | 43 -> NONTERM_exp 
    | 44 -> NONTERM_exp 
    | 45 -> NONTERM_exp 
    | 46 -> NONTERM_exp 
    | 47 -> NONTERM_exp 
    | 48 -> NONTERM_exp 
    | 49 -> NONTERM_exp 
    | 50 -> NONTERM_exp 
    | 51 -> NONTERM_exp 
    | 52 -> NONTERM_exp 
    | 53 -> NONTERM_exp 
    | 54 -> NONTERM_exp 
    | 55 -> NONTERM_exp 
    | 56 -> NONTERM_exp 
    | 57 -> NONTERM_exp 
    | 58 -> NONTERM_exp 
    | 59 -> NONTERM_exp 
    | 60 -> NONTERM_exp 
    | 61 -> NONTERM_exp 
    | 62 -> NONTERM_exp 
    | 63 -> NONTERM_exp 
    | 64 -> NONTERM_exp 
    | 65 -> NONTERM_exp 
    | 66 -> NONTERM_exp 
    | 67 -> NONTERM_parameters_ 
    | 68 -> NONTERM_parameters_ 
    | 69 -> NONTERM_parameters 
    | 70 -> NONTERM_parameters 
    | 71 -> NONTERM_record_field 
    | 72 -> NONTERM_record_fields_ 
    | 73 -> NONTERM_record_fields_ 
    | 74 -> NONTERM_record_fields 
    | 75 -> NONTERM_record_fields 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 
  | EOF  -> "EOF" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | TO  -> "TO" 
  | BREAK  -> "BREAK" 
  | VAR  -> "VAR" 
  | FN  -> "FN" 
  | TYPE  -> "TYPE" 
  | NEW  -> "NEW" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | NULL  -> "NULL" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | DOT  -> "DOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | ASSIGN  -> "ASSIGN" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | ANDALSO  -> "ANDALSO" 
  | ORELSE  -> "ORELSE" 
  | ARROW  -> "ARROW" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | ANDALSO  -> (null : System.Object) 
  | ORELSE  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 66us; 67us; 3us; 65535us; 0us; 5us; 6us; 7us; 66us; 5us; 3us; 65535us; 0us; 6us; 6us; 6us; 66us; 6us; 35us; 65535us; 0us; 137us; 6us; 137us; 24us; 137us; 27us; 137us; 40us; 137us; 43us; 137us; 49us; 137us; 60us; 137us; 66us; 137us; 72us; 137us; 75us; 137us; 103us; 137us; 104us; 137us; 105us; 137us; 106us; 137us; 107us; 137us; 108us; 137us; 109us; 137us; 110us; 137us; 111us; 137us; 112us; 137us; 113us; 137us; 114us; 137us; 120us; 137us; 122us; 137us; 123us; 137us; 124us; 137us; 126us; 137us; 127us; 137us; 131us; 137us; 132us; 137us; 133us; 137us; 135us; 137us; 142us; 137us; 146us; 137us; 36us; 65535us; 0us; 17us; 6us; 17us; 17us; 17us; 24us; 17us; 27us; 17us; 40us; 17us; 43us; 17us; 49us; 17us; 60us; 17us; 66us; 17us; 72us; 17us; 75us; 17us; 103us; 17us; 104us; 17us; 105us; 17us; 106us; 17us; 107us; 17us; 108us; 17us; 109us; 17us; 110us; 17us; 111us; 17us; 112us; 17us; 113us; 17us; 114us; 17us; 120us; 17us; 122us; 17us; 123us; 17us; 124us; 17us; 126us; 17us; 127us; 17us; 131us; 17us; 132us; 17us; 133us; 17us; 135us; 17us; 142us; 17us; 146us; 17us; 36us; 65535us; 0us; 10us; 6us; 10us; 17us; 18us; 24us; 10us; 27us; 10us; 40us; 10us; 43us; 10us; 49us; 10us; 60us; 10us; 66us; 10us; 72us; 10us; 75us; 10us; 103us; 10us; 104us; 10us; 105us; 10us; 106us; 10us; 107us; 10us; 108us; 10us; 109us; 10us; 110us; 10us; 111us; 10us; 112us; 10us; 113us; 10us; 114us; 10us; 120us; 10us; 122us; 10us; 123us; 10us; 124us; 10us; 126us; 10us; 127us; 10us; 131us; 10us; 132us; 10us; 133us; 10us; 135us; 10us; 142us; 10us; 146us; 10us; 5us; 65535us; 15us; 21us; 33us; 22us; 42us; 23us; 51us; 24us; 115us; 25us; 1us; 65535us; 15us; 16us; 3us; 65535us; 29us; 34us; 35us; 34us; 47us; 34us; 3us; 65535us; 29us; 37us; 35us; 36us; 47us; 37us; 2us; 65535us; 29us; 30us; 47us; 48us; 35us; 65535us; 0us; 11us; 6us; 11us; 24us; 11us; 27us; 11us; 40us; 11us; 43us; 11us; 49us; 11us; 60us; 11us; 66us; 11us; 72us; 11us; 75us; 11us; 103us; 11us; 104us; 11us; 105us; 11us; 106us; 11us; 107us; 11us; 108us; 11us; 109us; 11us; 110us; 11us; 111us; 11us; 112us; 11us; 113us; 11us; 114us; 11us; 120us; 11us; 122us; 11us; 123us; 11us; 124us; 11us; 126us; 11us; 127us; 11us; 131us; 11us; 132us; 11us; 133us; 11us; 135us; 11us; 142us; 11us; 146us; 11us; 36us; 65535us; 0us; 53us; 6us; 53us; 24us; 53us; 27us; 53us; 40us; 53us; 43us; 53us; 49us; 53us; 53us; 53us; 60us; 53us; 66us; 53us; 72us; 53us; 75us; 53us; 103us; 53us; 104us; 53us; 105us; 53us; 106us; 53us; 107us; 53us; 108us; 53us; 109us; 53us; 110us; 53us; 111us; 53us; 112us; 53us; 113us; 53us; 114us; 53us; 120us; 53us; 122us; 53us; 123us; 53us; 124us; 53us; 126us; 53us; 127us; 53us; 131us; 53us; 132us; 53us; 133us; 53us; 135us; 53us; 142us; 53us; 146us; 53us; 36us; 65535us; 0us; 12us; 6us; 12us; 24us; 12us; 27us; 12us; 40us; 12us; 43us; 12us; 49us; 12us; 53us; 54us; 60us; 12us; 66us; 12us; 72us; 12us; 75us; 12us; 103us; 12us; 104us; 12us; 105us; 12us; 106us; 12us; 107us; 12us; 108us; 12us; 109us; 12us; 110us; 12us; 111us; 12us; 112us; 12us; 113us; 12us; 114us; 12us; 120us; 12us; 122us; 12us; 123us; 12us; 124us; 12us; 126us; 12us; 127us; 12us; 131us; 12us; 132us; 12us; 133us; 12us; 135us; 12us; 142us; 12us; 146us; 12us; 35us; 65535us; 0us; 64us; 6us; 64us; 24us; 64us; 27us; 64us; 40us; 64us; 43us; 64us; 49us; 64us; 60us; 64us; 66us; 64us; 72us; 64us; 75us; 64us; 103us; 64us; 104us; 64us; 105us; 64us; 106us; 64us; 107us; 64us; 108us; 64us; 109us; 64us; 110us; 64us; 111us; 64us; 112us; 64us; 113us; 64us; 114us; 64us; 120us; 64us; 122us; 64us; 123us; 64us; 124us; 64us; 126us; 64us; 127us; 64us; 131us; 64us; 132us; 64us; 133us; 64us; 135us; 64us; 142us; 64us; 146us; 64us; 3us; 65535us; 55us; 56us; 58us; 59us; 62us; 63us; 35us; 65535us; 0us; 8us; 6us; 8us; 24us; 52us; 27us; 90us; 40us; 41us; 43us; 44us; 49us; 50us; 60us; 61us; 66us; 8us; 72us; 73us; 75us; 101us; 103us; 78us; 104us; 79us; 105us; 80us; 106us; 81us; 107us; 82us; 108us; 83us; 109us; 84us; 110us; 85us; 111us; 86us; 112us; 87us; 113us; 88us; 114us; 89us; 120us; 91us; 122us; 92us; 123us; 93us; 124us; 94us; 126us; 95us; 127us; 96us; 131us; 97us; 132us; 98us; 133us; 99us; 135us; 100us; 142us; 101us; 146us; 102us; 2us; 65535us; 75us; 144us; 142us; 143us; 1us; 65535us; 75us; 76us; 2us; 65535us; 116us; 147us; 148us; 147us; 2us; 65535us; 116us; 150us; 148us; 149us; 1us; 65535us; 116us; 117us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 12us; 16us; 52us; 89us; 126us; 132us; 134us; 138us; 142us; 145us; 181us; 218us; 255us; 291us; 295us; 331us; 334us; 336us; 339us; 342us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 4us; 1us; 6us; 1us; 6us; 14us; 7us; 8us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 2us; 13us; 14us; 1us; 14us; 1us; 15us; 2us; 15us; 55us; 2us; 16us; 17us; 2us; 16us; 19us; 2us; 16us; 25us; 2us; 16us; 27us; 2us; 16us; 56us; 1us; 16us; 2us; 16us; 56us; 1us; 16us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 2us; 20us; 21us; 1us; 21us; 1us; 21us; 1us; 23us; 2us; 24us; 25us; 2us; 24us; 25us; 1us; 24us; 13us; 24us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 25us; 1us; 25us; 13us; 25us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 2us; 26us; 27us; 2us; 26us; 27us; 2us; 26us; 27us; 2us; 26us; 27us; 2us; 26us; 27us; 13us; 26us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 27us; 13us; 27us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 2us; 28us; 29us; 1us; 29us; 2us; 30us; 42us; 1us; 30us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 13us; 33us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 33us; 1us; 33us; 2us; 34us; 57us; 1us; 35us; 2us; 36us; 66us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 13us; 40us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; 13us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 13us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 13us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 13us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 13us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 56us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 57us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 58us; 59us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 58us; 59us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 58us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 60us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 60us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 61us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 61us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 61us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 63us; 14us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 67us; 68us; 13us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 71us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 2us; 55us; 56us; 1us; 55us; 1us; 55us; 1us; 55us; 1us; 56us; 1us; 57us; 2us; 58us; 59us; 2us; 58us; 59us; 2us; 58us; 59us; 1us; 58us; 1us; 60us; 1us; 60us; 1us; 60us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 62us; 2us; 63us; 65us; 1us; 63us; 1us; 64us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 68us; 1us; 68us; 1us; 70us; 1us; 71us; 1us; 71us; 2us; 72us; 73us; 1us; 73us; 1us; 73us; 1us; 75us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 50us; 52us; 54us; 57us; 60us; 63us; 66us; 69us; 72us; 74us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 92us; 94us; 96us; 98us; 101us; 104us; 106us; 120us; 122us; 124us; 138us; 141us; 144us; 147us; 150us; 153us; 167us; 169us; 183us; 186us; 188us; 191us; 193us; 195us; 197us; 199us; 201us; 215us; 217us; 219us; 222us; 224us; 227us; 229us; 231us; 233us; 235us; 237us; 239us; 253us; 255us; 257us; 259us; 261us; 275us; 289us; 303us; 317us; 331us; 345us; 359us; 373us; 387us; 401us; 415us; 429us; 443us; 457us; 472us; 487us; 501us; 515us; 529us; 543us; 557us; 571us; 585us; 600us; 614us; 616us; 618us; 620us; 622us; 624us; 626us; 628us; 630us; 632us; 634us; 636us; 638us; 641us; 643us; 645us; 647us; 649us; 651us; 654us; 657us; 660us; 662us; 664us; 666us; 668us; 670us; 672us; 674us; 676us; 678us; 680us; 682us; 685us; 687us; 689us; 691us; 693us; 695us; 697us; 699us; 701us; 703us; 705us; 707us; 710us; 712us; 714us; |]
let _fsyacc_action_rows = 151
let _fsyacc_actionTableElements = [|17us; 16387us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 0us; 49152us; 1us; 32768us; 3us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16388us; 17us; 16389us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 0us; 16390us; 13us; 16391us; 19us; 9us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 1us; 32768us; 2us; 14us; 1us; 32768us; 31us; 15us; 2us; 32768us; 2us; 19us; 24us; 29us; 0us; 16396us; 1us; 16397us; 10us; 13us; 0us; 16398us; 0us; 16399us; 1us; 16399us; 24us; 116us; 1us; 16401us; 22us; 26us; 1us; 16403us; 22us; 26us; 2us; 32768us; 22us; 26us; 31us; 43us; 18us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 22us; 26us; 24us; 66us; 28us; 72us; 1us; 32768us; 22us; 27us; 1us; 32768us; 23us; 28us; 18us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 23us; 28us; 24us; 66us; 28us; 72us; 0us; 16400us; 1us; 16406us; 2us; 32us; 1us; 32768us; 25us; 31us; 0us; 16402us; 1us; 32768us; 18us; 33us; 1us; 32768us; 2us; 19us; 1us; 16404us; 17us; 35us; 1us; 32768us; 2us; 32us; 0us; 16405us; 0us; 16407us; 1us; 32768us; 2us; 39us; 2us; 32768us; 18us; 42us; 31us; 40us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 12us; 16408us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 1us; 32768us; 2us; 19us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 12us; 16409us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 1us; 32768us; 2us; 46us; 1us; 32768us; 20us; 47us; 1us; 16406us; 2us; 32us; 1us; 32768us; 21us; 49us; 18us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 40us; 51us; 12us; 16410us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 1us; 32768us; 2us; 19us; 12us; 16411us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 1us; 16412us; 9us; 45us; 0us; 16413us; 3us; 16415us; 20us; 75us; 22us; 60us; 26us; 57us; 0us; 16414us; 1us; 32768us; 2us; 58us; 2us; 16415us; 22us; 60us; 26us; 57us; 0us; 16416us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 13us; 32768us; 23us; 62us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 2us; 16415us; 22us; 60us; 26us; 57us; 0us; 16417us; 1us; 16418us; 31us; 120us; 0us; 16419us; 18us; 16387us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 41us; 140us; 1us; 32768us; 25us; 68us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 0us; 16424us; 0us; 16425us; 17us; 16453us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 1us; 32768us; 21us; 77us; 0us; 16426us; 2us; 16427us; 29us; 105us; 30us; 106us; 2us; 16428us; 29us; 105us; 30us; 106us; 0us; 16429us; 0us; 16430us; 10us; 16431us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 10us; 16432us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 10us; 16433us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 10us; 16434us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 10us; 16435us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 10us; 16436us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 12us; 16437us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 12us; 16438us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 13us; 32768us; 23us; 119us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 12us; 16441us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 13us; 32768us; 21us; 123us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 13us; 16443us; 13us; 124us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 12us; 16442us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 13us; 32768us; 21us; 127us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 12us; 16444us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 13us; 32768us; 6us; 132us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 13us; 32768us; 21us; 133us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 12us; 16445us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 13us; 32768us; 21us; 136us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 13us; 16451us; 17us; 142us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 12us; 16455us; 27us; 103us; 28us; 104us; 29us; 105us; 30us; 106us; 32us; 107us; 33us; 108us; 34us; 109us; 35us; 110us; 36us; 111us; 37us; 112us; 38us; 113us; 39us; 114us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 1us; 32768us; 2us; 20us; 1us; 16458us; 2us; 145us; 1us; 32768us; 25us; 118us; 0us; 16439us; 0us; 16440us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 1us; 32768us; 20us; 122us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 1us; 32768us; 20us; 126us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 1us; 32768us; 20us; 129us; 1us; 32768us; 2us; 130us; 1us; 32768us; 31us; 131us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 0us; 16446us; 18us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 41us; 138us; 0us; 16447us; 0us; 16448us; 1us; 32768us; 21us; 139us; 0us; 16449us; 1us; 32768us; 25us; 141us; 0us; 16450us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 0us; 16452us; 0us; 16454us; 1us; 32768us; 31us; 146us; 17us; 32768us; 0us; 74us; 1us; 71us; 2us; 55us; 4us; 125us; 5us; 128us; 7us; 134us; 8us; 38us; 9us; 45us; 10us; 13us; 11us; 115us; 12us; 121us; 14us; 65us; 15us; 69us; 16us; 70us; 20us; 135us; 24us; 66us; 28us; 72us; 1us; 16456us; 17us; 148us; 1us; 32768us; 2us; 145us; 0us; 16457us; 0us; 16459us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 18us; 19us; 21us; 22us; 23us; 24us; 42us; 43us; 57us; 58us; 59us; 60us; 61us; 63us; 65us; 68us; 69us; 71us; 72us; 73us; 75us; 77us; 79us; 82us; 101us; 103us; 105us; 124us; 125us; 127us; 129us; 130us; 132us; 134us; 136us; 138us; 139us; 140us; 142us; 145us; 163us; 176us; 178us; 196us; 209us; 211us; 213us; 215us; 217us; 236us; 249us; 251us; 264us; 266us; 267us; 271us; 272us; 274us; 277us; 278us; 296us; 310us; 313us; 314us; 316us; 317us; 336us; 338us; 339us; 340us; 341us; 342us; 360us; 361us; 362us; 380us; 382us; 383us; 386us; 389us; 390us; 391us; 402us; 413us; 424us; 435us; 446us; 457us; 470us; 483us; 497us; 510us; 524us; 538us; 551us; 565us; 578us; 592us; 606us; 619us; 633us; 647us; 660us; 678us; 696us; 714us; 732us; 750us; 768us; 786us; 804us; 822us; 840us; 858us; 876us; 878us; 880us; 882us; 883us; 884us; 902us; 904us; 922us; 940us; 958us; 960us; 978us; 996us; 998us; 1000us; 1002us; 1020us; 1038us; 1056us; 1057us; 1076us; 1077us; 1078us; 1080us; 1081us; 1083us; 1084us; 1102us; 1103us; 1104us; 1106us; 1124us; 1126us; 1128us; 1129us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 0us; 1us; 0us; 2us; 1us; 2us; 1us; 1us; 1us; 4us; 1us; 2us; 1us; 3us; 1us; 3us; 3us; 1us; 3us; 0us; 1us; 4us; 6us; 6us; 8us; 1us; 2us; 2us; 0us; 3us; 4us; 1us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 5us; 3us; 7us; 5us; 5us; 9us; 1us; 3us; 1us; 3us; 3us; 1us; 3us; 0us; 1us; 3us; 1us; 3us; 0us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 23us; 23us; 24us; 24us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16388us; 65535us; 16390us; 65535us; 16392us; 16393us; 16394us; 16395us; 65535us; 65535us; 65535us; 16396us; 65535us; 16398us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 16405us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 16414us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; 16417us; 65535us; 16419us; 65535us; 65535us; 16420us; 16421us; 16422us; 16423us; 65535us; 65535us; 16425us; 65535us; 65535us; 16426us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16439us; 16440us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16446us; 65535us; 16447us; 16448us; 65535us; 16449us; 65535us; 16450us; 65535us; 16452us; 16454us; 65535us; 65535us; 65535us; 65535us; 16457us; 16459us; |]
let _fsyacc_reductions ()  =    [| 
# 429 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 438 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                       _1 
                   )
# 49 "Parser.fsy"
                 : Program));
# 449 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                                 
                         let (l, x) = _1
                         match x with
                         | Some(x) -> l @ [x]
                         | None -> l
                   )
# 51 "Parser.fsy"
                 : 'prog));
# 464 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                             ([], None) 
                   )
# 71 "Parser.fsy"
                 : 'exps));
# 474 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                          
                             let _1: ExpsItem list = _1
                             let xs = List.take (_1.Length - 1) _1
                             for x in xs do
                                 match x with
                                 | ExpItem _ -> failwith "';' が必要です。"
                                 | _ -> ()
                             let ys = List.map (fun x -> match x with | ExpItem y | StmtItem y -> y) xs
                             match List.last _1 with
                             | ExpItem x -> (ys, Some(x))
                             | StmtItem x -> (ys @ [x], None)
                         
                   )
# 73 "Parser.fsy"
                 : 'exps));
# 496 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                              [] 
                   )
# 86 "Parser.fsy"
                 : 'exps_));
# 506 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_item)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                         _1 :: _2 
                   )
# 87 "Parser.fsy"
                 : 'exps_));
# 518 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                      ExpItem(_1, pos(parseState, 1, 1)) 
                   )
# 89 "Parser.fsy"
                 : 'exps_item));
# 529 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                       StmtItem(_1, pos(parseState, 1, 1)) 
                   )
# 90 "Parser.fsy"
                 : 'exps_item));
# 540 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                   TypeDec _1 
                   )
# 92 "Parser.fsy"
                 : 'dec));
# 551 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                VarDec _1 
                   )
# 93 "Parser.fsy"
                 : 'dec));
# 562 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                 FunDec _1 
                   )
# 94 "Parser.fsy"
                 : 'dec));
# 573 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                                { name = _2; ty = _4; pos = pos(parseState, 1, 4) } 
                   )
# 96 "Parser.fsy"
                 : 'tydec));
# 585 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                     [_1] 
                   )
# 98 "Parser.fsy"
                 : 'tydecs));
# 596 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                      _1 :: _2 
                   )
# 99 "Parser.fsy"
                 : 'tydecs));
# 608 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                SimpleTyId(_1, pos(parseState, 1, 1)) 
                   )
# 101 "Parser.fsy"
                 : 'tyid));
# 619 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                            ArrayTyId _1 
                   )
# 102 "Parser.fsy"
                 : 'tyid));
# 630 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                NameTy(_1, pos(parseState, 1, 1)) 
                   )
# 104 "Parser.fsy"
                 : 'ty));
# 641 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "Parser.fsy"
                                                RecordTy _2 
                   )
# 105 "Parser.fsy"
                 : 'ty));
# 652 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                              { name = _1; escape = ref true; typ = _3; pos = pos(parseState, 1, 3) } 
                   )
# 107 "Parser.fsy"
                 : 'tyfield));
# 664 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfield)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                          [_1] 
                   )
# 109 "Parser.fsy"
                 : 'tyfields_));
# 675 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfield)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                                                 _1 :: _3 
                   )
# 110 "Parser.fsy"
                 : 'tyfields_));
# 687 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                 [] 
                   )
# 112 "Parser.fsy"
                 : 'tyfields));
# 697 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                   _1 
                   )
# 113 "Parser.fsy"
                 : 'tyfields));
# 708 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                                                 { name = _2; escape = ref true; typ = None; init = _4; pos = pos(parseState, 1, 4) } 
                   )
# 115 "Parser.fsy"
                 : 'vardec));
# 720 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                                      { name = _2; escape = ref true; typ = Some(_4, pos(parseState, 4, 4)); init = _6; pos = pos(parseState, 1, 6) } 
                   )
# 116 "Parser.fsy"
                 : 'vardec));
# 733 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                                                { name = _2; params' = _4; result = None; body = _6; pos = pos(parseState, 1, 6) } 
                   )
# 118 "Parser.fsy"
                 : 'fundec));
# 746 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                                                                     { name = _2; params' = _4; result = Some(_7, pos(parseState, 7, 7)); body = _8; pos = pos(parseState, 1, 8) } 
                   )
# 119 "Parser.fsy"
                 : 'fundec));
# 760 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                       [_1] 
                   )
# 121 "Parser.fsy"
                 : 'fundecs));
# 771 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                        _1 :: _2 
                   )
# 122 "Parser.fsy"
                 : 'fundecs));
# 783 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                             
                         let rec varexp (left, xs) =
                             match xs with
                             | right :: tail ->
                                 let newleft =
                                     match right with
                                     | Field(symbol, pos) -> FieldVar(left, symbol, pos)
                                     | Subscript(exp, pos) -> SubscriptVar(left, exp, pos)
                                 varexp(newleft, tail)
                             | [] -> left
                         varexp(SimpleVar(_1, pos(parseState, 1, 1)), _2)
                   )
# 124 "Parser.fsy"
                 : 'lvalue));
# 805 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                    [] 
                   )
# 137 "Parser.fsy"
                 : 'lvalue_tail));
# 815 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                            Field(_2, pos(parseState, 2, 2)) :: _3 
                   )
# 138 "Parser.fsy"
                 : 'lvalue_tail));
# 827 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                                       Subscript(_2, pos(parseState, 2, 2)) :: _4 
                   )
# 139 "Parser.fsy"
                 : 'lvalue_tail));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                   VarExp _1 
                   )
# 141 "Parser.fsy"
                 : 'exp));
# 850 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                              NullExp 
                   )
# 142 "Parser.fsy"
                 : 'exp));
# 860 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                            SeqExp _2 
                   )
# 143 "Parser.fsy"
                 : 'exp));
# 871 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                              IntExp 1 
                   )
# 144 "Parser.fsy"
                 : 'exp));
# 881 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                               IntExp 0 
                   )
# 145 "Parser.fsy"
                 : 'exp));
# 891 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                             IntExp _1 
                   )
# 146 "Parser.fsy"
                 : 'exp));
# 902 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                          
                             match _2 with
                             | IntExp(x) -> IntExp(-x)
                             | x -> NegateExp(x, pos(parseState, 1, 2))
                         
                   )
# 148 "Parser.fsy"
                 : 'exp));
# 917 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                StringExp _1 
                   )
# 153 "Parser.fsy"
                 : 'exp));
# 928 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                     CallExp { func = _1; args = _3; pos = pos(parseState, 1, 4) } 
                   )
# 154 "Parser.fsy"
                 : 'exp));
# 940 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                      opexp(_1, PlusOp, _3, parseState) 
                   )
# 155 "Parser.fsy"
                 : 'exp));
# 952 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                       opexp(_1, MinusOp, _3, parseState) 
                   )
# 156 "Parser.fsy"
                 : 'exp));
# 964 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                       opexp(_1, TimesOp, _3, parseState) 
                   )
# 157 "Parser.fsy"
                 : 'exp));
# 976 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                        opexp(_1, DivideOp, _3, parseState) 
                   )
# 158 "Parser.fsy"
                 : 'exp));
# 988 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                    opexp(_1, EqOp, _3, parseState) 
                   )
# 159 "Parser.fsy"
                 : 'exp));
# 1000 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                     opexp(_1, NeqOp, _3, parseState) 
                   )
# 160 "Parser.fsy"
                 : 'exp));
# 1012 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                    opexp(_1, LtOp, _3, parseState) 
                   )
# 161 "Parser.fsy"
                 : 'exp));
# 1024 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                    opexp(_1, LeOp, _3, parseState) 
                   )
# 162 "Parser.fsy"
                 : 'exp));
# 1036 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                    opexp(_1, GtOp, _3, parseState) 
                   )
# 163 "Parser.fsy"
                 : 'exp));
# 1048 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                    opexp(_1, GeOp, _3, parseState) 
                   )
# 164 "Parser.fsy"
                 : 'exp));
# 1060 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                         ifelseexp((_1, pos(parseState, 1, 1)), _3, IntExp 0, pos(parseState, 1, 3)) 
                   )
# 165 "Parser.fsy"
                 : 'exp));
# 1072 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                        ifelseexp((_1, pos(parseState, 1, 1)), IntExp 1, _3, pos(parseState, 1, 3)) 
                   )
# 166 "Parser.fsy"
                 : 'exp));
# 1084 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                                            RecordExp { fields = _4; typ = _2; pos = pos(parseState, 1, 5) } 
                   )
# 167 "Parser.fsy"
                 : 'exp));
# 1096 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                                    ArrayExp { typ = (_2, pos(parseState, 2, 2)); size = (_4, pos(parseState, 4, 4)); pos = pos(parseState, 1, 5) } 
                   )
# 168 "Parser.fsy"
                 : 'exp));
# 1108 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                           AssignExp { var = _1; exp = _3; pos = pos(parseState, 1, 3) } 
                   )
# 169 "Parser.fsy"
                 : 'exp));
# 1120 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                           ifelseexp((_3, pos(parseState, 3, 3)), _5, _7, pos(parseState, 1, 7)) 
                   )
# 170 "Parser.fsy"
                 : 'exp));
# 1133 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "Parser.fsy"
                                                  IfExp { test = (_3, pos(parseState, 3, 3)); then' = _5; else' = None; pos = pos(parseState, 1, 5) } 
                   )
# 171 "Parser.fsy"
                 : 'exp));
# 1145 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                     WhileExp { test = _3; body = _5; pos = pos(parseState, 1, 5) } 
                   )
# 172 "Parser.fsy"
                 : 'exp));
# 1157 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                                    ForExp { var = _3; escape = ref true; lo = _5; hi = _7; body = _9; pos = pos(parseState, 1, 9) } 
                   )
# 173 "Parser.fsy"
                 : 'exp));
# 1171 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                               BreakExp(pos(parseState, 1, 1)) 
                   )
# 174 "Parser.fsy"
                 : 'exp));
# 1181 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                           _2 
                   )
# 175 "Parser.fsy"
                 : 'exp));
# 1192 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                             DecExp _1 
                   )
# 176 "Parser.fsy"
                 : 'exp));
# 1203 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                             ErrExp 
                   )
# 177 "Parser.fsy"
                 : 'exp));
# 1213 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                             ErrExp 
                   )
# 178 "Parser.fsy"
                 : 'exp));
# 1223 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                        [_1] 
                   )
# 180 "Parser.fsy"
                 : 'parameters_));
# 1234 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "Parser.fsy"
                                               _1 :: _3 
                   )
# 181 "Parser.fsy"
                 : 'parameters_));
# 1246 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                   [] 
                   )
# 183 "Parser.fsy"
                 : 'parameters));
# 1256 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                     _1 
                   )
# 184 "Parser.fsy"
                 : 'parameters));
# 1267 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "Parser.fsy"
                                                   (_1, _3, pos(parseState, 1, 3)) 
                   )
# 186 "Parser.fsy"
                 : 'record_field));
# 1279 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_field)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 188 "Parser.fsy"
                                                    [_1] 
                   )
# 188 "Parser.fsy"
                 : 'record_fields_));
# 1290 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_field)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                                           _1 :: _3 
                   )
# 189 "Parser.fsy"
                 : 'record_fields_));
# 1302 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                      [] 
                   )
# 191 "Parser.fsy"
                 : 'record_fields));
# 1312 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                        _1 
                   )
# 192 "Parser.fsy"
                 : 'record_fields));
|]
# 1324 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
