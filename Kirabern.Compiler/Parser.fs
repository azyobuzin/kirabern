// Implementation file for parser generated by fsyacc
module Kirabern.Compiler.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Microsoft.FSharp.Text.Parsing
open Absyn

type ParseError =
    { position: Position * Position
      stateStack: int list
      message: string }
let errors = new System.Threading.ThreadLocal<_>(fun x -> new System.Collections.Generic.List<ParseError>())
let clearErrors () = errors.Value.Clear()
let addError e = errors.Value.Add(e)

let parse_error_rich = Some (fun (ctx: ParseErrorContext<_>) ->
    { position = ctx.ParseState.ResultRange
      stateStack = ctx.StateStack
      message = ctx.Message }
    |> addError)

let pos (parseState: IParseState, startIdx, endIdx) =
    (parseState.InputStartPosition startIdx, parseState.InputEndPosition endIdx)

let input<'a> (parseState: IParseState, idx) =
    (unbox<'a>(parseState.GetInput(idx)), parseState.InputRange(idx))

type ExpsItem =
    | ExpItem of ExpPos
    | StmtItem of ExpPos

type LvalueTail =
    | Field of Symbol
    | Subscript of ExpPos

let opexp (oper, parseState: IParseState) = 
    OpExp { left = downcast (parseState.GetInput(1)), parseState.InputRange(1)
            oper = oper
            right = downcast (parseState.GetInput(3)), parseState.InputRange(3)
            pos = pos (parseState, 1, 3) }

let ifelseexp (test, then', else', pos) =
    IfExp { test = test; then' = then'; else' = Some(else'); pos = pos }

# 49 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | STRING of (string)
  | INT of (int)
  | ID of (string)
  | EOF
  | WHILE
  | FOR
  | TO
  | BREAK
  | VAR
  | FN
  | TYPE
  | NEW
  | IF
  | ELSE
  | NULL
  | TRUE
  | FALSE
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | ANDALSO
  | ORELSE
  | ARROW
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_EOF
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_TO
    | TOKEN_BREAK
    | TOKEN_VAR
    | TOKEN_FN
    | TOKEN_TYPE
    | TOKEN_NEW
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_NULL
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_ASSIGN
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_ANDALSO
    | TOKEN_ORELSE
    | TOKEN_ARROW
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_exps
    | NONTERM_exp2
    | NONTERM_exps_
    | NONTERM_dec
    | NONTERM_tydec
    | NONTERM_tydecs
    | NONTERM_tyid
    | NONTERM_ty
    | NONTERM_tyfield
    | NONTERM_tyfields_
    | NONTERM_tyfields
    | NONTERM_vardec
    | NONTERM_fundec
    | NONTERM_fundecs
    | NONTERM_lvalue
    | NONTERM_lvalue_tail
    | NONTERM_exp
    | NONTERM_parameters_
    | NONTERM_parameters
    | NONTERM_record_field
    | NONTERM_record_fields_
    | NONTERM_record_fields

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | STRING _ -> 0 
  | INT _ -> 1 
  | ID _ -> 2 
  | EOF  -> 3 
  | WHILE  -> 4 
  | FOR  -> 5 
  | TO  -> 6 
  | BREAK  -> 7 
  | VAR  -> 8 
  | FN  -> 9 
  | TYPE  -> 10 
  | NEW  -> 11 
  | IF  -> 12 
  | ELSE  -> 13 
  | NULL  -> 14 
  | TRUE  -> 15 
  | FALSE  -> 16 
  | COMMA  -> 17 
  | COLON  -> 18 
  | SEMICOLON  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LBRACK  -> 22 
  | RBRACK  -> 23 
  | LBRACE  -> 24 
  | RBRACE  -> 25 
  | DOT  -> 26 
  | PLUS  -> 27 
  | MINUS  -> 28 
  | TIMES  -> 29 
  | DIVIDE  -> 30 
  | ASSIGN  -> 31 
  | EQ  -> 32 
  | NEQ  -> 33 
  | LT  -> 34 
  | LE  -> 35 
  | GT  -> 36 
  | GE  -> 37 
  | ANDALSO  -> 38 
  | ORELSE  -> 39 
  | ARROW  -> 40 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_STRING 
  | 1 -> TOKEN_INT 
  | 2 -> TOKEN_ID 
  | 3 -> TOKEN_EOF 
  | 4 -> TOKEN_WHILE 
  | 5 -> TOKEN_FOR 
  | 6 -> TOKEN_TO 
  | 7 -> TOKEN_BREAK 
  | 8 -> TOKEN_VAR 
  | 9 -> TOKEN_FN 
  | 10 -> TOKEN_TYPE 
  | 11 -> TOKEN_NEW 
  | 12 -> TOKEN_IF 
  | 13 -> TOKEN_ELSE 
  | 14 -> TOKEN_NULL 
  | 15 -> TOKEN_TRUE 
  | 16 -> TOKEN_FALSE 
  | 17 -> TOKEN_COMMA 
  | 18 -> TOKEN_COLON 
  | 19 -> TOKEN_SEMICOLON 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LBRACK 
  | 23 -> TOKEN_RBRACK 
  | 24 -> TOKEN_LBRACE 
  | 25 -> TOKEN_RBRACE 
  | 26 -> TOKEN_DOT 
  | 27 -> TOKEN_PLUS 
  | 28 -> TOKEN_MINUS 
  | 29 -> TOKEN_TIMES 
  | 30 -> TOKEN_DIVIDE 
  | 31 -> TOKEN_ASSIGN 
  | 32 -> TOKEN_EQ 
  | 33 -> TOKEN_NEQ 
  | 34 -> TOKEN_LT 
  | 35 -> TOKEN_LE 
  | 36 -> TOKEN_GT 
  | 37 -> TOKEN_GE 
  | 38 -> TOKEN_ANDALSO 
  | 39 -> TOKEN_ORELSE 
  | 40 -> TOKEN_ARROW 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_exps 
    | 4 -> NONTERM_exps 
    | 5 -> NONTERM_exp2 
    | 6 -> NONTERM_exp2 
    | 7 -> NONTERM_exps_ 
    | 8 -> NONTERM_exps_ 
    | 9 -> NONTERM_exps_ 
    | 10 -> NONTERM_dec 
    | 11 -> NONTERM_dec 
    | 12 -> NONTERM_dec 
    | 13 -> NONTERM_tydec 
    | 14 -> NONTERM_tydecs 
    | 15 -> NONTERM_tydecs 
    | 16 -> NONTERM_tyid 
    | 17 -> NONTERM_tyid 
    | 18 -> NONTERM_ty 
    | 19 -> NONTERM_ty 
    | 20 -> NONTERM_tyfield 
    | 21 -> NONTERM_tyfields_ 
    | 22 -> NONTERM_tyfields_ 
    | 23 -> NONTERM_tyfields 
    | 24 -> NONTERM_tyfields 
    | 25 -> NONTERM_vardec 
    | 26 -> NONTERM_vardec 
    | 27 -> NONTERM_fundec 
    | 28 -> NONTERM_fundec 
    | 29 -> NONTERM_fundecs 
    | 30 -> NONTERM_fundecs 
    | 31 -> NONTERM_lvalue 
    | 32 -> NONTERM_lvalue_tail 
    | 33 -> NONTERM_lvalue_tail 
    | 34 -> NONTERM_lvalue_tail 
    | 35 -> NONTERM_exp 
    | 36 -> NONTERM_exp 
    | 37 -> NONTERM_exp 
    | 38 -> NONTERM_exp 
    | 39 -> NONTERM_exp 
    | 40 -> NONTERM_exp 
    | 41 -> NONTERM_exp 
    | 42 -> NONTERM_exp 
    | 43 -> NONTERM_exp 
    | 44 -> NONTERM_exp 
    | 45 -> NONTERM_exp 
    | 46 -> NONTERM_exp 
    | 47 -> NONTERM_exp 
    | 48 -> NONTERM_exp 
    | 49 -> NONTERM_exp 
    | 50 -> NONTERM_exp 
    | 51 -> NONTERM_exp 
    | 52 -> NONTERM_exp 
    | 53 -> NONTERM_exp 
    | 54 -> NONTERM_exp 
    | 55 -> NONTERM_exp 
    | 56 -> NONTERM_exp 
    | 57 -> NONTERM_exp 
    | 58 -> NONTERM_exp 
    | 59 -> NONTERM_exp 
    | 60 -> NONTERM_exp 
    | 61 -> NONTERM_exp 
    | 62 -> NONTERM_exp 
    | 63 -> NONTERM_exp 
    | 64 -> NONTERM_exp 
    | 65 -> NONTERM_exp 
    | 66 -> NONTERM_exp 
    | 67 -> NONTERM_exp 
    | 68 -> NONTERM_parameters_ 
    | 69 -> NONTERM_parameters_ 
    | 70 -> NONTERM_parameters 
    | 71 -> NONTERM_parameters 
    | 72 -> NONTERM_record_field 
    | 73 -> NONTERM_record_fields_ 
    | 74 -> NONTERM_record_fields_ 
    | 75 -> NONTERM_record_fields 
    | 76 -> NONTERM_record_fields 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 
  | EOF  -> "EOF" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | TO  -> "TO" 
  | BREAK  -> "BREAK" 
  | VAR  -> "VAR" 
  | FN  -> "FN" 
  | TYPE  -> "TYPE" 
  | NEW  -> "NEW" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | NULL  -> "NULL" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | DOT  -> "DOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | ASSIGN  -> "ASSIGN" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | ANDALSO  -> "ANDALSO" 
  | ORELSE  -> "ORELSE" 
  | ARROW  -> "ARROW" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | ANDALSO  -> (null : System.Object) 
  | ORELSE  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 70us; 71us; 4us; 65535us; 0us; 7us; 8us; 7us; 12us; 7us; 70us; 7us; 4us; 65535us; 0us; 5us; 8us; 9us; 12us; 13us; 70us; 5us; 36us; 65535us; 0us; 141us; 8us; 141us; 12us; 141us; 28us; 141us; 31us; 141us; 44us; 141us; 47us; 141us; 53us; 141us; 64us; 141us; 70us; 141us; 76us; 141us; 79us; 141us; 107us; 141us; 108us; 141us; 109us; 141us; 110us; 141us; 111us; 141us; 112us; 141us; 113us; 141us; 114us; 141us; 115us; 141us; 116us; 141us; 117us; 141us; 118us; 141us; 124us; 141us; 126us; 141us; 127us; 141us; 128us; 141us; 130us; 141us; 131us; 141us; 135us; 141us; 136us; 141us; 137us; 141us; 139us; 141us; 145us; 141us; 149us; 141us; 37us; 65535us; 0us; 21us; 8us; 21us; 12us; 21us; 21us; 21us; 28us; 21us; 31us; 21us; 44us; 21us; 47us; 21us; 53us; 21us; 64us; 21us; 70us; 21us; 76us; 21us; 79us; 21us; 107us; 21us; 108us; 21us; 109us; 21us; 110us; 21us; 111us; 21us; 112us; 21us; 113us; 21us; 114us; 21us; 115us; 21us; 116us; 21us; 117us; 21us; 118us; 21us; 124us; 21us; 126us; 21us; 127us; 21us; 128us; 21us; 130us; 21us; 131us; 21us; 135us; 21us; 136us; 21us; 137us; 21us; 139us; 21us; 145us; 21us; 149us; 21us; 37us; 65535us; 0us; 14us; 8us; 14us; 12us; 14us; 21us; 22us; 28us; 14us; 31us; 14us; 44us; 14us; 47us; 14us; 53us; 14us; 64us; 14us; 70us; 14us; 76us; 14us; 79us; 14us; 107us; 14us; 108us; 14us; 109us; 14us; 110us; 14us; 111us; 14us; 112us; 14us; 113us; 14us; 114us; 14us; 115us; 14us; 116us; 14us; 117us; 14us; 118us; 14us; 124us; 14us; 126us; 14us; 127us; 14us; 128us; 14us; 130us; 14us; 131us; 14us; 135us; 14us; 136us; 14us; 137us; 14us; 139us; 14us; 145us; 14us; 149us; 14us; 5us; 65535us; 19us; 25us; 37us; 26us; 46us; 27us; 55us; 28us; 119us; 29us; 1us; 65535us; 19us; 20us; 3us; 65535us; 33us; 38us; 39us; 38us; 51us; 38us; 3us; 65535us; 33us; 41us; 39us; 40us; 51us; 41us; 2us; 65535us; 33us; 34us; 51us; 52us; 36us; 65535us; 0us; 15us; 8us; 15us; 12us; 15us; 28us; 15us; 31us; 15us; 44us; 15us; 47us; 15us; 53us; 15us; 64us; 15us; 70us; 15us; 76us; 15us; 79us; 15us; 107us; 15us; 108us; 15us; 109us; 15us; 110us; 15us; 111us; 15us; 112us; 15us; 113us; 15us; 114us; 15us; 115us; 15us; 116us; 15us; 117us; 15us; 118us; 15us; 124us; 15us; 126us; 15us; 127us; 15us; 128us; 15us; 130us; 15us; 131us; 15us; 135us; 15us; 136us; 15us; 137us; 15us; 139us; 15us; 145us; 15us; 149us; 15us; 37us; 65535us; 0us; 57us; 8us; 57us; 12us; 57us; 28us; 57us; 31us; 57us; 44us; 57us; 47us; 57us; 53us; 57us; 57us; 57us; 64us; 57us; 70us; 57us; 76us; 57us; 79us; 57us; 107us; 57us; 108us; 57us; 109us; 57us; 110us; 57us; 111us; 57us; 112us; 57us; 113us; 57us; 114us; 57us; 115us; 57us; 116us; 57us; 117us; 57us; 118us; 57us; 124us; 57us; 126us; 57us; 127us; 57us; 128us; 57us; 130us; 57us; 131us; 57us; 135us; 57us; 136us; 57us; 137us; 57us; 139us; 57us; 145us; 57us; 149us; 57us; 37us; 65535us; 0us; 16us; 8us; 16us; 12us; 16us; 28us; 16us; 31us; 16us; 44us; 16us; 47us; 16us; 53us; 16us; 57us; 58us; 64us; 16us; 70us; 16us; 76us; 16us; 79us; 16us; 107us; 16us; 108us; 16us; 109us; 16us; 110us; 16us; 111us; 16us; 112us; 16us; 113us; 16us; 114us; 16us; 115us; 16us; 116us; 16us; 117us; 16us; 118us; 16us; 124us; 16us; 126us; 16us; 127us; 16us; 128us; 16us; 130us; 16us; 131us; 16us; 135us; 16us; 136us; 16us; 137us; 16us; 139us; 16us; 145us; 16us; 149us; 16us; 36us; 65535us; 0us; 68us; 8us; 68us; 12us; 68us; 28us; 68us; 31us; 68us; 44us; 68us; 47us; 68us; 53us; 68us; 64us; 68us; 70us; 68us; 76us; 68us; 79us; 68us; 107us; 68us; 108us; 68us; 109us; 68us; 110us; 68us; 111us; 68us; 112us; 68us; 113us; 68us; 114us; 68us; 115us; 68us; 116us; 68us; 117us; 68us; 118us; 68us; 124us; 68us; 126us; 68us; 127us; 68us; 128us; 68us; 130us; 68us; 131us; 68us; 135us; 68us; 136us; 68us; 137us; 68us; 139us; 68us; 145us; 68us; 149us; 68us; 3us; 65535us; 59us; 60us; 62us; 63us; 66us; 67us; 36us; 65535us; 0us; 6us; 8us; 6us; 12us; 6us; 28us; 56us; 31us; 94us; 44us; 45us; 47us; 48us; 53us; 54us; 64us; 65us; 70us; 6us; 76us; 77us; 79us; 105us; 107us; 82us; 108us; 83us; 109us; 84us; 110us; 85us; 111us; 86us; 112us; 87us; 113us; 88us; 114us; 89us; 115us; 90us; 116us; 91us; 117us; 92us; 118us; 93us; 124us; 95us; 126us; 96us; 127us; 97us; 128us; 98us; 130us; 99us; 131us; 100us; 135us; 101us; 136us; 102us; 137us; 103us; 139us; 104us; 145us; 105us; 149us; 106us; 2us; 65535us; 79us; 147us; 145us; 146us; 1us; 65535us; 79us; 80us; 2us; 65535us; 120us; 150us; 151us; 150us; 2us; 65535us; 120us; 153us; 151us; 152us; 1us; 65535us; 120us; 121us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 13us; 18us; 55us; 93us; 131us; 137us; 139us; 143us; 147us; 150us; 187us; 225us; 263us; 300us; 304us; 341us; 344us; 346us; 349us; 352us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 4us; 13us; 5us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 2us; 7us; 8us; 1us; 8us; 1us; 8us; 1us; 9us; 2us; 9us; 67us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 13us; 1us; 13us; 2us; 14us; 15us; 1us; 15us; 1us; 16us; 2us; 16us; 56us; 2us; 17us; 18us; 2us; 17us; 20us; 2us; 17us; 26us; 2us; 17us; 28us; 2us; 17us; 57us; 1us; 17us; 2us; 17us; 57us; 1us; 17us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 2us; 21us; 22us; 1us; 22us; 1us; 22us; 1us; 24us; 2us; 25us; 26us; 2us; 25us; 26us; 1us; 25us; 13us; 25us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 1us; 26us; 1us; 26us; 13us; 26us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 2us; 27us; 28us; 2us; 27us; 28us; 2us; 27us; 28us; 2us; 27us; 28us; 2us; 27us; 28us; 13us; 27us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 1us; 28us; 13us; 28us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 2us; 29us; 30us; 1us; 30us; 2us; 31us; 43us; 1us; 31us; 1us; 33us; 1us; 33us; 1us; 33us; 1us; 34us; 13us; 34us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 1us; 34us; 1us; 34us; 2us; 35us; 58us; 1us; 36us; 2us; 37us; 67us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 13us; 41us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 43us; 13us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 13us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 13us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 13us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 13us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 54us; 55us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 54us; 55us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 54us; 55us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 54us; 55us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 54us; 55us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 55us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 57us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 58us; 14us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 59us; 60us; 14us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 59us; 60us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 59us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 61us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 61us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 62us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 62us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 62us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 64us; 14us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 68us; 69us; 13us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 54us; 55us; 72us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 2us; 56us; 57us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 58us; 2us; 59us; 60us; 2us; 59us; 60us; 2us; 59us; 60us; 1us; 59us; 1us; 61us; 1us; 61us; 1us; 61us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 62us; 1us; 63us; 2us; 64us; 66us; 1us; 64us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 69us; 1us; 69us; 1us; 71us; 1us; 72us; 1us; 72us; 2us; 73us; 74us; 1us; 74us; 1us; 74us; 1us; 76us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 26us; 29us; 31us; 33us; 35us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 59us; 61us; 63us; 66us; 69us; 72us; 75us; 78us; 81us; 83us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 101us; 103us; 105us; 107us; 110us; 113us; 115us; 129us; 131us; 133us; 147us; 150us; 153us; 156us; 159us; 162us; 176us; 178us; 192us; 195us; 197us; 200us; 202us; 204us; 206us; 208us; 210us; 224us; 226us; 228us; 231us; 233us; 236us; 238us; 240us; 242us; 244us; 246us; 248us; 262us; 264us; 266us; 268us; 270us; 284us; 298us; 312us; 326us; 340us; 354us; 368us; 382us; 396us; 410us; 424us; 438us; 452us; 466us; 481us; 496us; 510us; 524us; 538us; 552us; 566us; 580us; 594us; 609us; 623us; 625us; 627us; 629us; 631us; 633us; 635us; 637us; 639us; 641us; 643us; 645us; 647us; 650us; 652us; 654us; 656us; 658us; 660us; 663us; 666us; 669us; 671us; 673us; 675us; 677us; 679us; 681us; 683us; 685us; 687us; 689us; 691us; 694us; 696us; 698us; 700us; 702us; 704us; 706us; 708us; 710us; 712us; 714us; 717us; 719us; 721us; |]
let _fsyacc_action_rows = 154
let _fsyacc_actionTableElements = [|19us; 16387us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 19us; 16390us; 20us; 139us; 24us; 70us; 28us; 76us; 41us; 10us; 0us; 49152us; 1us; 32768us; 3us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16388us; 12us; 16389us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 1us; 16391us; 19us; 8us; 18us; 16390us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 41us; 10us; 0us; 16392us; 1us; 32768us; 19us; 12us; 2us; 32768us; 19us; 12us; 25us; 144us; 18us; 16390us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 41us; 10us; 0us; 16393us; 0us; 16394us; 0us; 16395us; 0us; 16396us; 1us; 32768us; 2us; 18us; 1us; 32768us; 31us; 19us; 2us; 32768us; 2us; 23us; 24us; 33us; 0us; 16397us; 1us; 16398us; 10us; 17us; 0us; 16399us; 0us; 16400us; 1us; 16400us; 24us; 120us; 1us; 16402us; 22us; 30us; 1us; 16404us; 22us; 30us; 2us; 32768us; 22us; 30us; 31us; 47us; 18us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 22us; 30us; 24us; 70us; 28us; 76us; 1us; 32768us; 22us; 31us; 1us; 32768us; 23us; 32us; 18us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 23us; 32us; 24us; 70us; 28us; 76us; 0us; 16401us; 1us; 16407us; 2us; 36us; 1us; 32768us; 25us; 35us; 0us; 16403us; 1us; 32768us; 18us; 37us; 1us; 32768us; 2us; 23us; 1us; 16405us; 17us; 39us; 1us; 32768us; 2us; 36us; 0us; 16406us; 0us; 16408us; 1us; 32768us; 2us; 43us; 2us; 32768us; 18us; 46us; 31us; 44us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 12us; 16409us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 1us; 32768us; 2us; 23us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 12us; 16410us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 1us; 32768us; 2us; 50us; 1us; 32768us; 20us; 51us; 1us; 16407us; 2us; 36us; 1us; 32768us; 21us; 53us; 18us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 40us; 55us; 12us; 16411us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 1us; 32768us; 2us; 23us; 12us; 16412us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 1us; 16413us; 9us; 49us; 0us; 16414us; 3us; 16416us; 20us; 79us; 22us; 64us; 26us; 61us; 0us; 16415us; 1us; 32768us; 2us; 62us; 2us; 16416us; 22us; 64us; 26us; 61us; 0us; 16417us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 13us; 32768us; 23us; 66us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 2us; 16416us; 22us; 64us; 26us; 61us; 0us; 16418us; 1us; 16419us; 31us; 124us; 0us; 16420us; 19us; 16387us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 19us; 16390us; 20us; 139us; 24us; 70us; 28us; 76us; 41us; 11us; 1us; 32768us; 25us; 72us; 0us; 16421us; 0us; 16422us; 0us; 16423us; 0us; 16424us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 0us; 16425us; 0us; 16426us; 17us; 16454us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 1us; 32768us; 21us; 81us; 0us; 16427us; 2us; 16428us; 29us; 109us; 30us; 110us; 2us; 16429us; 29us; 109us; 30us; 110us; 0us; 16430us; 0us; 16431us; 10us; 16432us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 10us; 16433us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 10us; 16434us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 10us; 16435us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 10us; 16436us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 10us; 16437us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 12us; 16438us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 12us; 16439us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 13us; 32768us; 23us; 123us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 12us; 16442us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 13us; 32768us; 21us; 127us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 13us; 16444us; 13us; 128us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 12us; 16443us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 13us; 32768us; 21us; 131us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 12us; 16445us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 13us; 32768us; 6us; 136us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 13us; 32768us; 21us; 137us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 12us; 16446us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 13us; 32768us; 21us; 140us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 13us; 16452us; 17us; 145us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 12us; 16456us; 27us; 107us; 28us; 108us; 29us; 109us; 30us; 110us; 32us; 111us; 33us; 112us; 34us; 113us; 35us; 114us; 36us; 115us; 37us; 116us; 38us; 117us; 39us; 118us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 1us; 32768us; 2us; 24us; 1us; 16459us; 2us; 148us; 1us; 32768us; 25us; 122us; 0us; 16440us; 0us; 16441us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 1us; 32768us; 20us; 126us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 1us; 32768us; 20us; 130us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 1us; 32768us; 20us; 133us; 1us; 32768us; 2us; 134us; 1us; 32768us; 31us; 135us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 0us; 16447us; 18us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 41us; 142us; 0us; 16448us; 0us; 16449us; 1us; 32768us; 21us; 143us; 0us; 16450us; 0us; 16451us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 0us; 16453us; 0us; 16455us; 1us; 32768us; 31us; 149us; 17us; 32768us; 0us; 78us; 1us; 75us; 2us; 59us; 4us; 129us; 5us; 132us; 7us; 138us; 8us; 42us; 9us; 49us; 10us; 17us; 11us; 119us; 12us; 125us; 14us; 69us; 15us; 73us; 16us; 74us; 20us; 139us; 24us; 70us; 28us; 76us; 1us; 16457us; 17us; 151us; 1us; 32768us; 2us; 148us; 0us; 16458us; 0us; 16460us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 20us; 21us; 23us; 24us; 25us; 26us; 39us; 41us; 60us; 61us; 63us; 66us; 85us; 86us; 87us; 88us; 89us; 91us; 93us; 96us; 97us; 99us; 100us; 101us; 103us; 105us; 107us; 110us; 129us; 131us; 133us; 152us; 153us; 155us; 157us; 158us; 160us; 162us; 164us; 166us; 167us; 168us; 170us; 173us; 191us; 204us; 206us; 224us; 237us; 239us; 241us; 243us; 245us; 264us; 277us; 279us; 292us; 294us; 295us; 299us; 300us; 302us; 305us; 306us; 324us; 338us; 341us; 342us; 344us; 345us; 365us; 367us; 368us; 369us; 370us; 371us; 389us; 390us; 391us; 409us; 411us; 412us; 415us; 418us; 419us; 420us; 431us; 442us; 453us; 464us; 475us; 486us; 499us; 512us; 526us; 539us; 553us; 567us; 580us; 594us; 607us; 621us; 635us; 648us; 662us; 676us; 689us; 707us; 725us; 743us; 761us; 779us; 797us; 815us; 833us; 851us; 869us; 887us; 905us; 907us; 909us; 911us; 912us; 913us; 931us; 933us; 951us; 969us; 987us; 989us; 1007us; 1025us; 1027us; 1029us; 1031us; 1049us; 1067us; 1085us; 1086us; 1105us; 1106us; 1107us; 1109us; 1110us; 1111us; 1129us; 1130us; 1131us; 1133us; 1151us; 1153us; 1155us; 1156us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 0us; 1us; 1us; 0us; 1us; 3us; 3us; 1us; 1us; 1us; 4us; 1us; 2us; 1us; 3us; 1us; 3us; 3us; 1us; 3us; 0us; 1us; 4us; 6us; 6us; 8us; 1us; 2us; 2us; 0us; 3us; 4us; 1us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 5us; 3us; 7us; 5us; 5us; 9us; 1us; 3us; 1us; 3us; 3us; 1us; 3us; 0us; 1us; 3us; 1us; 3us; 0us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 6us; 6us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 16us; 17us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 23us; 23us; 24us; 24us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16388us; 65535us; 65535us; 65535us; 16392us; 65535us; 65535us; 65535us; 16393us; 16394us; 16395us; 16396us; 65535us; 65535us; 65535us; 16397us; 65535us; 16399us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 16406us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16414us; 65535us; 16415us; 65535us; 65535us; 16417us; 65535us; 65535us; 65535us; 16418us; 65535us; 16420us; 65535us; 65535us; 16421us; 16422us; 16423us; 16424us; 65535us; 65535us; 16426us; 65535us; 65535us; 16427us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16440us; 16441us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16447us; 65535us; 16448us; 16449us; 65535us; 16450us; 16451us; 65535us; 16453us; 16455us; 65535us; 65535us; 65535us; 65535us; 16458us; 16460us; |]
let _fsyacc_reductions ()  =    [| 
# 444 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 453 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                       _1 
                   )
# 63 "Parser.fsy"
                 : Absyn.Program));
# 464 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                  _1 
                   )
# 65 "Parser.fsy"
                 : 'prog));
# 475 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                             [] 
                   )
# 67 "Parser.fsy"
                 : 'exps));
# 485 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                               _1 
                   )
# 68 "Parser.fsy"
                 : 'exps));
# 496 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                 _1 
                   )
# 70 "Parser.fsy"
                 : 'exp2));
# 507 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                         VoidExp 
                   )
# 71 "Parser.fsy"
                 : 'exp2));
# 517 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp2)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                   [input(parseState, 1)] 
                   )
# 73 "Parser.fsy"
                 : 'exps_));
# 528 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp2)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                              input(parseState, 1) :: _3 
                   )
# 74 "Parser.fsy"
                 : 'exps_));
# 540 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                               (ErrExp, parseState.InputRange(1)) :: _3 
                   )
# 75 "Parser.fsy"
                 : 'exps_));
# 551 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                   TypeDec _1 
                   )
# 77 "Parser.fsy"
                 : 'dec));
# 562 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                VarDec _1 
                   )
# 78 "Parser.fsy"
                 : 'dec));
# 573 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                 FunDec _1 
                   )
# 79 "Parser.fsy"
                 : 'dec));
# 584 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                { name = input(parseState, 2); ty = _4; pos = pos(parseState, 1, 4) } 
                   )
# 81 "Parser.fsy"
                 : 'tydec));
# 596 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                     [_1] 
                   )
# 83 "Parser.fsy"
                 : 'tydecs));
# 607 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                      _1 :: _2 
                   )
# 84 "Parser.fsy"
                 : 'tydecs));
# 619 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                SimpleTyId(input(parseState, 1)) 
                   )
# 86 "Parser.fsy"
                 : 'tyid));
# 630 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                            ArrayTyId _1 
                   )
# 87 "Parser.fsy"
                 : 'tyid));
# 641 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                NameTy _1 
                   )
# 89 "Parser.fsy"
                 : 'ty));
# 652 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                RecordTy _2 
                   )
# 90 "Parser.fsy"
                 : 'ty));
# 663 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                              { name = input(parseState, 1); escape = ref true; typ = _3; pos = pos(parseState, 1, 3) } 
                   )
# 92 "Parser.fsy"
                 : 'tyfield));
# 675 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfield)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                          [_1] 
                   )
# 94 "Parser.fsy"
                 : 'tyfields_));
# 686 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfield)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                                 _1 :: _3 
                   )
# 95 "Parser.fsy"
                 : 'tyfields_));
# 698 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                 [] 
                   )
# 97 "Parser.fsy"
                 : 'tyfields));
# 708 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                   _1 
                   )
# 98 "Parser.fsy"
                 : 'tyfields));
# 719 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                 { name = _2; escape = ref true; typ = None; init = input(parseState, 4); pos = pos(parseState, 1, 4) } 
                   )
# 100 "Parser.fsy"
                 : 'vardec));
# 731 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                      { name = _2; escape = ref true; typ = Some(_4); init = input(parseState, 6); pos = pos(parseState, 1, 6) } 
                   )
# 101 "Parser.fsy"
                 : 'vardec));
# 744 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                                                { name = input(parseState, 2); params' = _4; result = None; body = input(parseState, 6); pos = pos(parseState, 1, 6) } 
                   )
# 103 "Parser.fsy"
                 : 'fundec));
# 757 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                                                     { name = input(parseState, 2); params' = _4; result = Some(_7); body = input(parseState, 8); pos = pos(parseState, 1, 8) } 
                   )
# 104 "Parser.fsy"
                 : 'fundec));
# 771 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                       [_1] 
                   )
# 106 "Parser.fsy"
                 : 'fundecs));
# 782 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "Parser.fsy"
                                        _1 :: _2 
                   )
# 107 "Parser.fsy"
                 : 'fundecs));
# 794 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "Parser.fsy"
                                             
                         let startPos = parseState.InputStartPosition(1)
                         let rec varexp (left, xs) =
                             match xs with
                             | right :: tail ->
                                 let newleft =
                                     match right with
                                     | Field((_, (p, _)) as symbol) -> FieldVar((left, (startPos, p)), symbol)
                                     | Subscript((_, (p, _)) as exp) -> SubscriptVar((left, (startPos, p)), exp)
                                 varexp(newleft, tail)
                             | [] -> left
                         varexp(SimpleVar(_1, parseState.InputRange(1)), _2)
                   )
# 109 "Parser.fsy"
                 : 'lvalue));
# 817 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                                    [] 
                   )
# 123 "Parser.fsy"
                 : 'lvalue_tail));
# 827 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                            Field(input(parseState, 2)) :: _3 
                   )
# 124 "Parser.fsy"
                 : 'lvalue_tail));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                                                       Subscript(input(parseState, 2)) :: _4 
                   )
# 125 "Parser.fsy"
                 : 'lvalue_tail));
# 851 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                                   VarExp _1 
                   )
# 127 "Parser.fsy"
                 : 'exp));
# 862 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                              NullExp 
                   )
# 128 "Parser.fsy"
                 : 'exp));
# 872 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                            SeqExp _2 
                   )
# 129 "Parser.fsy"
                 : 'exp));
# 883 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                              IntExp 1 
                   )
# 130 "Parser.fsy"
                 : 'exp));
# 893 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                               IntExp 0 
                   )
# 131 "Parser.fsy"
                 : 'exp));
# 903 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                             IntExp _1 
                   )
# 132 "Parser.fsy"
                 : 'exp));
# 914 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                          
                             match _2 with
                             | IntExp(x) -> IntExp(-x)
                             | x -> NegateExp(x, pos(parseState, 1, 2))
                         
                   )
# 134 "Parser.fsy"
                 : 'exp));
# 929 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                StringExp _1 
                   )
# 139 "Parser.fsy"
                 : 'exp));
# 940 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                                     CallExp { func = input(parseState, 1); args = _3; pos = pos(parseState, 1, 4) } 
                   )
# 140 "Parser.fsy"
                 : 'exp));
# 952 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                      opexp(PlusOp, parseState) 
                   )
# 141 "Parser.fsy"
                 : 'exp));
# 964 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                       opexp(MinusOp, parseState) 
                   )
# 142 "Parser.fsy"
                 : 'exp));
# 976 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                       opexp(TimesOp, parseState) 
                   )
# 143 "Parser.fsy"
                 : 'exp));
# 988 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                        opexp(DivideOp, parseState) 
                   )
# 144 "Parser.fsy"
                 : 'exp));
# 1000 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                    opexp(EqOp, parseState) 
                   )
# 145 "Parser.fsy"
                 : 'exp));
# 1012 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                     opexp(NeqOp, parseState) 
                   )
# 146 "Parser.fsy"
                 : 'exp));
# 1024 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                    opexp(LtOp, parseState) 
                   )
# 147 "Parser.fsy"
                 : 'exp));
# 1036 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                    opexp(LeOp, parseState) 
                   )
# 148 "Parser.fsy"
                 : 'exp));
# 1048 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                    opexp(GtOp, parseState) 
                   )
# 149 "Parser.fsy"
                 : 'exp));
# 1060 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                    opexp(GeOp, parseState) 
                   )
# 150 "Parser.fsy"
                 : 'exp));
# 1072 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                         ifelseexp(input(parseState, 1), _3, IntExp 0, pos(parseState, 1, 3)) 
                   )
# 151 "Parser.fsy"
                 : 'exp));
# 1084 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                        ifelseexp(input(parseState, 1), IntExp 1, _3, pos(parseState, 1, 3)) 
                   )
# 152 "Parser.fsy"
                 : 'exp));
# 1096 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                            RecordExp { fields = _4; typ = _2, pos(parseState, 2, 2); pos = pos(parseState, 1, 5) } 
                   )
# 153 "Parser.fsy"
                 : 'exp));
# 1108 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                    ArrayExp { typ = ArrayTyId(_2); size = input(parseState, 4); pos = pos(parseState, 1, 5) } 
                   )
# 154 "Parser.fsy"
                 : 'exp));
# 1120 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                           AssignExp { var = _1; exp = _3; pos = pos(parseState, 1, 3) } 
                   )
# 155 "Parser.fsy"
                 : 'exp));
# 1132 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                                           ifelseexp((_3, pos(parseState, 3, 3)), _5, _7, pos(parseState, 1, 7)) 
                   )
# 156 "Parser.fsy"
                 : 'exp));
# 1145 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                                  IfExp { test = (_3, pos(parseState, 3, 3)); then' = _5; else' = None; pos = pos(parseState, 1, 5) } 
                   )
# 157 "Parser.fsy"
                 : 'exp));
# 1157 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                                     WhileExp { test = input(parseState, 3); body = _5; pos = pos(parseState, 1, 5) } 
                   )
# 158 "Parser.fsy"
                 : 'exp));
# 1169 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                                                    ForExp { var = _3; escape = ref true; lo = input(parseState, 5); hi = input(parseState, 7); body = _9; pos = pos(parseState, 1, 9) } 
                   )
# 159 "Parser.fsy"
                 : 'exp));
# 1183 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                               BreakExp(parseState.InputRange(1)) 
                   )
# 160 "Parser.fsy"
                 : 'exp));
# 1193 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                           _2 
                   )
# 161 "Parser.fsy"
                 : 'exp));
# 1204 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                             DecExp _1 
                   )
# 162 "Parser.fsy"
                 : 'exp));
# 1215 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "Parser.fsy"
                                             ErrExp 
                   )
# 163 "Parser.fsy"
                 : 'exp));
# 1225 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                             ErrExp 
                   )
# 164 "Parser.fsy"
                 : 'exp));
# 1235 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "Parser.fsy"
                                        [input(parseState, 1)] 
                   )
# 166 "Parser.fsy"
                 : 'parameters_));
# 1246 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                               input(parseState, 1) :: _3 
                   )
# 167 "Parser.fsy"
                 : 'parameters_));
# 1258 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                                   [] 
                   )
# 169 "Parser.fsy"
                 : 'parameters));
# 1268 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                     _1 
                   )
# 170 "Parser.fsy"
                 : 'parameters));
# 1279 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                   input(parseState, 1), input(parseState, 3) 
                   )
# 172 "Parser.fsy"
                 : 'record_field));
# 1291 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_field)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "Parser.fsy"
                                                    [_1] 
                   )
# 174 "Parser.fsy"
                 : 'record_fields_));
# 1302 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_field)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                                           _1 :: _3 
                   )
# 175 "Parser.fsy"
                 : 'record_fields_));
# 1314 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "Parser.fsy"
                                      [] 
                   )
# 177 "Parser.fsy"
                 : 'record_fields));
# 1324 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "Parser.fsy"
                                        _1 
                   )
# 178 "Parser.fsy"
                 : 'record_fields));
|]
# 1336 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Absyn.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
