// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Microsoft.FSharp.Text.Parsing
open Absyn

type ParseError =
    { position: Position * Position
      stateStack: int list
      message: string }
let errors = new System.Threading.ThreadLocal<_>(fun x -> new System.Collections.Generic.List<ParseError>())
let clearErrors () = errors.Value.Clear()
let addError e = errors.Value.Add(e)

let parse_error_rich = Some (fun (ctx: ParseErrorContext<_>) ->
    { position = ctx.ParseState.ResultRange
      stateStack = ctx.StateStack
      message = ctx.Message }
    |> addError)

let pos (parseState: IParseState, startIdx, endIdx) =
    (parseState.InputStartPosition startIdx, parseState.InputEndPosition endIdx)

type ExpsItem =
    | ExpItem of (Exp * Pos)
    | StmtItem of (Exp * Pos)

type LvalueTail =
    | Field of Pos * Symbol * Pos
    | Subscript of Pos * Exp * Pos

let opexp (left, oper, right, parseState) =
    OpExp { left = left; oper = oper; right = right; pos = pos(parseState, 1, 3) }

let ifelseexp (test, then', else', pos) =
    IfExp { test = test; then' = then'; else' = Some(else'); pos = pos }

# 43 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | STRING of (string)
  | INT of (int)
  | ID of (string)
  | EOF
  | WHILE
  | FOR
  | TO
  | BREAK
  | VAR
  | FN
  | TYPE
  | NEW
  | IF
  | ELSE
  | NULL
  | TRUE
  | FALSE
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | ANDALSO
  | ORELSE
  | ARROW
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_EOF
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_TO
    | TOKEN_BREAK
    | TOKEN_VAR
    | TOKEN_FN
    | TOKEN_TYPE
    | TOKEN_NEW
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_NULL
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_ASSIGN
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_ANDALSO
    | TOKEN_ORELSE
    | TOKEN_ARROW
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_exps
    | NONTERM_exps_
    | NONTERM_dec
    | NONTERM_tydec
    | NONTERM_tydecs
    | NONTERM_tyid
    | NONTERM_ty
    | NONTERM_tyfield
    | NONTERM_tyfields_
    | NONTERM_tyfields
    | NONTERM_vardec
    | NONTERM_fundec
    | NONTERM_fundecs
    | NONTERM_lvalue
    | NONTERM_lvalue_tail
    | NONTERM_exp
    | NONTERM_parameters_
    | NONTERM_parameters
    | NONTERM_record_field
    | NONTERM_record_fields_
    | NONTERM_record_fields

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | STRING _ -> 0 
  | INT _ -> 1 
  | ID _ -> 2 
  | EOF  -> 3 
  | WHILE  -> 4 
  | FOR  -> 5 
  | TO  -> 6 
  | BREAK  -> 7 
  | VAR  -> 8 
  | FN  -> 9 
  | TYPE  -> 10 
  | NEW  -> 11 
  | IF  -> 12 
  | ELSE  -> 13 
  | NULL  -> 14 
  | TRUE  -> 15 
  | FALSE  -> 16 
  | COMMA  -> 17 
  | COLON  -> 18 
  | SEMICOLON  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LBRACK  -> 22 
  | RBRACK  -> 23 
  | LBRACE  -> 24 
  | RBRACE  -> 25 
  | DOT  -> 26 
  | PLUS  -> 27 
  | MINUS  -> 28 
  | TIMES  -> 29 
  | DIVIDE  -> 30 
  | ASSIGN  -> 31 
  | EQ  -> 32 
  | NEQ  -> 33 
  | LT  -> 34 
  | LE  -> 35 
  | GT  -> 36 
  | GE  -> 37 
  | ANDALSO  -> 38 
  | ORELSE  -> 39 
  | ARROW  -> 40 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_STRING 
  | 1 -> TOKEN_INT 
  | 2 -> TOKEN_ID 
  | 3 -> TOKEN_EOF 
  | 4 -> TOKEN_WHILE 
  | 5 -> TOKEN_FOR 
  | 6 -> TOKEN_TO 
  | 7 -> TOKEN_BREAK 
  | 8 -> TOKEN_VAR 
  | 9 -> TOKEN_FN 
  | 10 -> TOKEN_TYPE 
  | 11 -> TOKEN_NEW 
  | 12 -> TOKEN_IF 
  | 13 -> TOKEN_ELSE 
  | 14 -> TOKEN_NULL 
  | 15 -> TOKEN_TRUE 
  | 16 -> TOKEN_FALSE 
  | 17 -> TOKEN_COMMA 
  | 18 -> TOKEN_COLON 
  | 19 -> TOKEN_SEMICOLON 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LBRACK 
  | 23 -> TOKEN_RBRACK 
  | 24 -> TOKEN_LBRACE 
  | 25 -> TOKEN_RBRACE 
  | 26 -> TOKEN_DOT 
  | 27 -> TOKEN_PLUS 
  | 28 -> TOKEN_MINUS 
  | 29 -> TOKEN_TIMES 
  | 30 -> TOKEN_DIVIDE 
  | 31 -> TOKEN_ASSIGN 
  | 32 -> TOKEN_EQ 
  | 33 -> TOKEN_NEQ 
  | 34 -> TOKEN_LT 
  | 35 -> TOKEN_LE 
  | 36 -> TOKEN_GT 
  | 37 -> TOKEN_GE 
  | 38 -> TOKEN_ANDALSO 
  | 39 -> TOKEN_ORELSE 
  | 40 -> TOKEN_ARROW 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_exps 
    | 4 -> NONTERM_exps 
    | 5 -> NONTERM_exps_ 
    | 6 -> NONTERM_exps_ 
    | 7 -> NONTERM_dec 
    | 8 -> NONTERM_dec 
    | 9 -> NONTERM_dec 
    | 10 -> NONTERM_tydec 
    | 11 -> NONTERM_tydecs 
    | 12 -> NONTERM_tydecs 
    | 13 -> NONTERM_tyid 
    | 14 -> NONTERM_tyid 
    | 15 -> NONTERM_ty 
    | 16 -> NONTERM_ty 
    | 17 -> NONTERM_tyfield 
    | 18 -> NONTERM_tyfields_ 
    | 19 -> NONTERM_tyfields_ 
    | 20 -> NONTERM_tyfields 
    | 21 -> NONTERM_tyfields 
    | 22 -> NONTERM_vardec 
    | 23 -> NONTERM_vardec 
    | 24 -> NONTERM_fundec 
    | 25 -> NONTERM_fundec 
    | 26 -> NONTERM_fundecs 
    | 27 -> NONTERM_fundecs 
    | 28 -> NONTERM_lvalue 
    | 29 -> NONTERM_lvalue_tail 
    | 30 -> NONTERM_lvalue_tail 
    | 31 -> NONTERM_lvalue_tail 
    | 32 -> NONTERM_exp 
    | 33 -> NONTERM_exp 
    | 34 -> NONTERM_exp 
    | 35 -> NONTERM_exp 
    | 36 -> NONTERM_exp 
    | 37 -> NONTERM_exp 
    | 38 -> NONTERM_exp 
    | 39 -> NONTERM_exp 
    | 40 -> NONTERM_exp 
    | 41 -> NONTERM_exp 
    | 42 -> NONTERM_exp 
    | 43 -> NONTERM_exp 
    | 44 -> NONTERM_exp 
    | 45 -> NONTERM_exp 
    | 46 -> NONTERM_exp 
    | 47 -> NONTERM_exp 
    | 48 -> NONTERM_exp 
    | 49 -> NONTERM_exp 
    | 50 -> NONTERM_exp 
    | 51 -> NONTERM_exp 
    | 52 -> NONTERM_exp 
    | 53 -> NONTERM_exp 
    | 54 -> NONTERM_exp 
    | 55 -> NONTERM_exp 
    | 56 -> NONTERM_exp 
    | 57 -> NONTERM_exp 
    | 58 -> NONTERM_exp 
    | 59 -> NONTERM_exp 
    | 60 -> NONTERM_exp 
    | 61 -> NONTERM_exp 
    | 62 -> NONTERM_exp 
    | 63 -> NONTERM_exp 
    | 64 -> NONTERM_exp 
    | 65 -> NONTERM_exp 
    | 66 -> NONTERM_parameters_ 
    | 67 -> NONTERM_parameters_ 
    | 68 -> NONTERM_parameters 
    | 69 -> NONTERM_parameters 
    | 70 -> NONTERM_record_field 
    | 71 -> NONTERM_record_fields_ 
    | 72 -> NONTERM_record_fields_ 
    | 73 -> NONTERM_record_fields 
    | 74 -> NONTERM_record_fields 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 
  | EOF  -> "EOF" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | TO  -> "TO" 
  | BREAK  -> "BREAK" 
  | VAR  -> "VAR" 
  | FN  -> "FN" 
  | TYPE  -> "TYPE" 
  | NEW  -> "NEW" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | NULL  -> "NULL" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | DOT  -> "DOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | ASSIGN  -> "ASSIGN" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | ANDALSO  -> "ANDALSO" 
  | ORELSE  -> "ORELSE" 
  | ARROW  -> "ARROW" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | ANDALSO  -> (null : System.Object) 
  | ORELSE  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 65us; 66us; 3us; 65535us; 0us; 5us; 7us; 8us; 65us; 5us; 35us; 65535us; 0us; 136us; 7us; 136us; 23us; 136us; 26us; 136us; 39us; 136us; 42us; 136us; 48us; 136us; 59us; 136us; 65us; 136us; 71us; 136us; 74us; 136us; 102us; 136us; 103us; 136us; 104us; 136us; 105us; 136us; 106us; 136us; 107us; 136us; 108us; 136us; 109us; 136us; 110us; 136us; 111us; 136us; 112us; 136us; 113us; 136us; 119us; 136us; 121us; 136us; 122us; 136us; 123us; 136us; 125us; 136us; 126us; 136us; 130us; 136us; 131us; 136us; 132us; 136us; 134us; 136us; 141us; 136us; 145us; 136us; 36us; 65535us; 0us; 16us; 7us; 16us; 16us; 16us; 23us; 16us; 26us; 16us; 39us; 16us; 42us; 16us; 48us; 16us; 59us; 16us; 65us; 16us; 71us; 16us; 74us; 16us; 102us; 16us; 103us; 16us; 104us; 16us; 105us; 16us; 106us; 16us; 107us; 16us; 108us; 16us; 109us; 16us; 110us; 16us; 111us; 16us; 112us; 16us; 113us; 16us; 119us; 16us; 121us; 16us; 122us; 16us; 123us; 16us; 125us; 16us; 126us; 16us; 130us; 16us; 131us; 16us; 132us; 16us; 134us; 16us; 141us; 16us; 145us; 16us; 36us; 65535us; 0us; 9us; 7us; 9us; 16us; 17us; 23us; 9us; 26us; 9us; 39us; 9us; 42us; 9us; 48us; 9us; 59us; 9us; 65us; 9us; 71us; 9us; 74us; 9us; 102us; 9us; 103us; 9us; 104us; 9us; 105us; 9us; 106us; 9us; 107us; 9us; 108us; 9us; 109us; 9us; 110us; 9us; 111us; 9us; 112us; 9us; 113us; 9us; 119us; 9us; 121us; 9us; 122us; 9us; 123us; 9us; 125us; 9us; 126us; 9us; 130us; 9us; 131us; 9us; 132us; 9us; 134us; 9us; 141us; 9us; 145us; 9us; 5us; 65535us; 14us; 20us; 32us; 21us; 41us; 22us; 50us; 23us; 114us; 24us; 1us; 65535us; 14us; 15us; 3us; 65535us; 28us; 33us; 34us; 33us; 46us; 33us; 3us; 65535us; 28us; 36us; 34us; 35us; 46us; 36us; 2us; 65535us; 28us; 29us; 46us; 47us; 35us; 65535us; 0us; 10us; 7us; 10us; 23us; 10us; 26us; 10us; 39us; 10us; 42us; 10us; 48us; 10us; 59us; 10us; 65us; 10us; 71us; 10us; 74us; 10us; 102us; 10us; 103us; 10us; 104us; 10us; 105us; 10us; 106us; 10us; 107us; 10us; 108us; 10us; 109us; 10us; 110us; 10us; 111us; 10us; 112us; 10us; 113us; 10us; 119us; 10us; 121us; 10us; 122us; 10us; 123us; 10us; 125us; 10us; 126us; 10us; 130us; 10us; 131us; 10us; 132us; 10us; 134us; 10us; 141us; 10us; 145us; 10us; 36us; 65535us; 0us; 52us; 7us; 52us; 23us; 52us; 26us; 52us; 39us; 52us; 42us; 52us; 48us; 52us; 52us; 52us; 59us; 52us; 65us; 52us; 71us; 52us; 74us; 52us; 102us; 52us; 103us; 52us; 104us; 52us; 105us; 52us; 106us; 52us; 107us; 52us; 108us; 52us; 109us; 52us; 110us; 52us; 111us; 52us; 112us; 52us; 113us; 52us; 119us; 52us; 121us; 52us; 122us; 52us; 123us; 52us; 125us; 52us; 126us; 52us; 130us; 52us; 131us; 52us; 132us; 52us; 134us; 52us; 141us; 52us; 145us; 52us; 36us; 65535us; 0us; 11us; 7us; 11us; 23us; 11us; 26us; 11us; 39us; 11us; 42us; 11us; 48us; 11us; 52us; 53us; 59us; 11us; 65us; 11us; 71us; 11us; 74us; 11us; 102us; 11us; 103us; 11us; 104us; 11us; 105us; 11us; 106us; 11us; 107us; 11us; 108us; 11us; 109us; 11us; 110us; 11us; 111us; 11us; 112us; 11us; 113us; 11us; 119us; 11us; 121us; 11us; 122us; 11us; 123us; 11us; 125us; 11us; 126us; 11us; 130us; 11us; 131us; 11us; 132us; 11us; 134us; 11us; 141us; 11us; 145us; 11us; 35us; 65535us; 0us; 63us; 7us; 63us; 23us; 63us; 26us; 63us; 39us; 63us; 42us; 63us; 48us; 63us; 59us; 63us; 65us; 63us; 71us; 63us; 74us; 63us; 102us; 63us; 103us; 63us; 104us; 63us; 105us; 63us; 106us; 63us; 107us; 63us; 108us; 63us; 109us; 63us; 110us; 63us; 111us; 63us; 112us; 63us; 113us; 63us; 119us; 63us; 121us; 63us; 122us; 63us; 123us; 63us; 125us; 63us; 126us; 63us; 130us; 63us; 131us; 63us; 132us; 63us; 134us; 63us; 141us; 63us; 145us; 63us; 3us; 65535us; 54us; 55us; 57us; 58us; 61us; 62us; 35us; 65535us; 0us; 6us; 7us; 6us; 23us; 51us; 26us; 89us; 39us; 40us; 42us; 43us; 48us; 49us; 59us; 60us; 65us; 6us; 71us; 72us; 74us; 100us; 102us; 77us; 103us; 78us; 104us; 79us; 105us; 80us; 106us; 81us; 107us; 82us; 108us; 83us; 109us; 84us; 110us; 85us; 111us; 86us; 112us; 87us; 113us; 88us; 119us; 90us; 121us; 91us; 122us; 92us; 123us; 93us; 125us; 94us; 126us; 95us; 130us; 96us; 131us; 97us; 132us; 98us; 134us; 99us; 141us; 100us; 145us; 101us; 2us; 65535us; 74us; 143us; 141us; 142us; 1us; 65535us; 74us; 75us; 2us; 65535us; 115us; 146us; 147us; 146us; 2us; 65535us; 115us; 149us; 147us; 148us; 1us; 65535us; 115us; 116us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 12us; 48us; 85us; 122us; 128us; 130us; 134us; 138us; 141us; 177us; 214us; 251us; 287us; 291us; 327us; 330us; 332us; 335us; 338us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 4us; 14us; 5us; 6us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 10us; 1us; 10us; 2us; 11us; 12us; 1us; 12us; 1us; 13us; 2us; 13us; 53us; 2us; 14us; 15us; 2us; 14us; 17us; 2us; 14us; 23us; 2us; 14us; 25us; 2us; 14us; 54us; 1us; 14us; 2us; 14us; 54us; 1us; 14us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 2us; 18us; 19us; 1us; 19us; 1us; 19us; 1us; 21us; 2us; 22us; 23us; 2us; 22us; 23us; 1us; 22us; 13us; 22us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 23us; 1us; 23us; 13us; 23us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 2us; 24us; 25us; 2us; 24us; 25us; 2us; 24us; 25us; 2us; 24us; 25us; 2us; 24us; 25us; 13us; 24us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 25us; 13us; 25us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 2us; 26us; 27us; 1us; 27us; 2us; 28us; 40us; 1us; 28us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 13us; 31us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 31us; 1us; 31us; 2us; 32us; 55us; 1us; 33us; 2us; 34us; 64us; 1us; 34us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 13us; 38us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 40us; 13us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 13us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 13us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 13us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 13us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 54us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 55us; 14us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 56us; 57us; 14us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 56us; 57us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 56us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 58us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 58us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 59us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 59us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 59us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 61us; 14us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 66us; 67us; 13us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 70us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 2us; 53us; 54us; 1us; 53us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 55us; 2us; 56us; 57us; 2us; 56us; 57us; 2us; 56us; 57us; 1us; 56us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 60us; 2us; 61us; 63us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 63us; 1us; 64us; 1us; 64us; 1us; 67us; 1us; 67us; 1us; 69us; 1us; 70us; 1us; 70us; 2us; 71us; 72us; 1us; 72us; 1us; 72us; 1us; 74us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 27us; 29us; 31us; 33us; 35us; 37us; 39us; 41us; 43us; 45us; 48us; 50us; 52us; 55us; 58us; 61us; 64us; 67us; 70us; 72us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 90us; 92us; 94us; 96us; 99us; 102us; 104us; 118us; 120us; 122us; 136us; 139us; 142us; 145us; 148us; 151us; 165us; 167us; 181us; 184us; 186us; 189us; 191us; 193us; 195us; 197us; 199us; 213us; 215us; 217us; 220us; 222us; 225us; 227us; 229us; 231us; 233us; 235us; 237us; 251us; 253us; 255us; 257us; 259us; 273us; 287us; 301us; 315us; 329us; 343us; 357us; 371us; 385us; 399us; 413us; 427us; 441us; 455us; 470us; 485us; 499us; 513us; 527us; 541us; 555us; 569us; 583us; 598us; 612us; 614us; 616us; 618us; 620us; 622us; 624us; 626us; 628us; 630us; 632us; 634us; 636us; 639us; 641us; 643us; 645us; 647us; 649us; 652us; 655us; 658us; 660us; 662us; 664us; 666us; 668us; 670us; 672us; 674us; 676us; 678us; 680us; 683us; 685us; 687us; 689us; 691us; 693us; 695us; 697us; 699us; 701us; 703us; 705us; 708us; 710us; 712us; |]
let _fsyacc_action_rows = 150
let _fsyacc_actionTableElements = [|29us; 16387us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 19us; 16449us; 20us; 134us; 24us; 65us; 27us; 16449us; 28us; 71us; 29us; 16449us; 30us; 16449us; 32us; 16449us; 33us; 16449us; 34us; 16449us; 35us; 16449us; 36us; 16449us; 37us; 16449us; 38us; 16449us; 39us; 16449us; 0us; 49152us; 1us; 32768us; 3us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16388us; 13us; 16389us; 19us; 7us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 0us; 16390us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 1us; 32768us; 2us; 13us; 1us; 32768us; 31us; 14us; 2us; 32768us; 2us; 18us; 24us; 28us; 0us; 16394us; 1us; 16395us; 10us; 12us; 0us; 16396us; 0us; 16397us; 1us; 16397us; 24us; 115us; 1us; 16399us; 22us; 25us; 1us; 16401us; 22us; 25us; 2us; 32768us; 22us; 25us; 31us; 42us; 18us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 22us; 25us; 24us; 65us; 28us; 71us; 1us; 32768us; 22us; 26us; 1us; 32768us; 23us; 27us; 18us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 23us; 27us; 24us; 65us; 28us; 71us; 0us; 16398us; 1us; 16404us; 2us; 31us; 1us; 32768us; 25us; 30us; 0us; 16400us; 1us; 32768us; 18us; 32us; 1us; 32768us; 2us; 18us; 1us; 16402us; 17us; 34us; 1us; 32768us; 2us; 31us; 0us; 16403us; 0us; 16405us; 1us; 32768us; 2us; 38us; 2us; 32768us; 18us; 41us; 31us; 39us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 12us; 16406us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 1us; 32768us; 2us; 18us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 12us; 16407us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 1us; 32768us; 2us; 45us; 1us; 32768us; 20us; 46us; 1us; 16404us; 2us; 31us; 1us; 32768us; 21us; 48us; 18us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 40us; 50us; 12us; 16408us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 1us; 32768us; 2us; 18us; 12us; 16409us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 1us; 16410us; 9us; 44us; 0us; 16411us; 3us; 16413us; 20us; 74us; 22us; 59us; 26us; 56us; 0us; 16412us; 1us; 32768us; 2us; 57us; 2us; 16413us; 22us; 59us; 26us; 56us; 0us; 16414us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 13us; 32768us; 23us; 61us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 2us; 16413us; 22us; 59us; 26us; 56us; 0us; 16415us; 1us; 16416us; 31us; 119us; 0us; 16417us; 30us; 16387us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 19us; 16449us; 20us; 134us; 24us; 65us; 27us; 16449us; 28us; 71us; 29us; 16449us; 30us; 16449us; 32us; 16449us; 33us; 16449us; 34us; 16449us; 35us; 16449us; 36us; 16449us; 37us; 16449us; 38us; 16449us; 39us; 16449us; 41us; 139us; 1us; 32768us; 25us; 67us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 0us; 16422us; 0us; 16423us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 1us; 32768us; 21us; 76us; 0us; 16424us; 2us; 16425us; 29us; 104us; 30us; 105us; 2us; 16426us; 29us; 104us; 30us; 105us; 0us; 16427us; 0us; 16428us; 10us; 16429us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 10us; 16430us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 10us; 16431us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 10us; 16432us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 10us; 16433us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 10us; 16434us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 12us; 16435us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 12us; 16436us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 13us; 32768us; 23us; 118us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 12us; 16439us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 13us; 32768us; 21us; 122us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 13us; 16441us; 13us; 123us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 12us; 16440us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 13us; 32768us; 21us; 126us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 12us; 16442us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 13us; 32768us; 6us; 131us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 13us; 32768us; 21us; 132us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 12us; 16443us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 13us; 32768us; 21us; 135us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 13us; 16450us; 17us; 141us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 12us; 16454us; 27us; 102us; 28us; 103us; 29us; 104us; 30us; 105us; 32us; 106us; 33us; 107us; 34us; 108us; 35us; 109us; 36us; 110us; 37us; 111us; 38us; 112us; 39us; 113us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 1us; 32768us; 2us; 19us; 1us; 16457us; 2us; 144us; 1us; 32768us; 25us; 117us; 0us; 16437us; 0us; 16438us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 1us; 32768us; 20us; 121us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 1us; 32768us; 20us; 125us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 1us; 32768us; 20us; 128us; 1us; 32768us; 2us; 129us; 1us; 32768us; 31us; 130us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 0us; 16444us; 18us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 41us; 137us; 0us; 16445us; 0us; 16446us; 1us; 32768us; 21us; 138us; 0us; 16447us; 1us; 32768us; 25us; 140us; 0us; 16448us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 0us; 16451us; 0us; 16453us; 1us; 32768us; 31us; 145us; 17us; 16449us; 0us; 73us; 1us; 70us; 2us; 54us; 4us; 124us; 5us; 127us; 7us; 133us; 8us; 37us; 9us; 44us; 10us; 12us; 11us; 114us; 12us; 120us; 14us; 64us; 15us; 68us; 16us; 69us; 20us; 134us; 24us; 65us; 28us; 71us; 1us; 16455us; 17us; 147us; 1us; 32768us; 2us; 144us; 0us; 16456us; 0us; 16458us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 30us; 31us; 33us; 34us; 35us; 36us; 50us; 68us; 69us; 70us; 71us; 72us; 74us; 76us; 79us; 80us; 82us; 83us; 84us; 86us; 88us; 90us; 93us; 112us; 114us; 116us; 135us; 136us; 138us; 140us; 141us; 143us; 145us; 147us; 149us; 150us; 151us; 153us; 156us; 174us; 187us; 189us; 207us; 220us; 222us; 224us; 226us; 228us; 247us; 260us; 262us; 275us; 277us; 278us; 282us; 283us; 285us; 288us; 289us; 307us; 321us; 324us; 325us; 327us; 328us; 359us; 361us; 362us; 363us; 364us; 365us; 383us; 384us; 385us; 403us; 405us; 406us; 409us; 412us; 413us; 414us; 425us; 436us; 447us; 458us; 469us; 480us; 493us; 506us; 520us; 533us; 547us; 561us; 574us; 588us; 601us; 615us; 629us; 642us; 656us; 670us; 683us; 701us; 719us; 737us; 755us; 773us; 791us; 809us; 827us; 845us; 863us; 881us; 899us; 901us; 903us; 905us; 906us; 907us; 925us; 927us; 945us; 963us; 981us; 983us; 1001us; 1019us; 1021us; 1023us; 1025us; 1043us; 1061us; 1079us; 1080us; 1099us; 1100us; 1101us; 1103us; 1104us; 1106us; 1107us; 1125us; 1126us; 1127us; 1129us; 1147us; 1149us; 1151us; 1152us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 0us; 1us; 1us; 3us; 1us; 1us; 1us; 4us; 1us; 2us; 1us; 3us; 1us; 3us; 3us; 1us; 3us; 0us; 1us; 4us; 6us; 6us; 8us; 1us; 2us; 2us; 0us; 3us; 4us; 1us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 5us; 3us; 7us; 5us; 5us; 9us; 1us; 3us; 1us; 3us; 3us; 0us; 1us; 3us; 0us; 1us; 3us; 1us; 3us; 0us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 22us; 22us; 23us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16388us; 65535us; 65535us; 16390us; 16391us; 16392us; 16393us; 65535us; 65535us; 65535us; 16394us; 65535us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 16403us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16411us; 65535us; 16412us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 16415us; 65535us; 16417us; 65535us; 65535us; 16418us; 16419us; 16420us; 16421us; 65535us; 65535us; 16423us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16437us; 16438us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16444us; 65535us; 16445us; 16446us; 65535us; 16447us; 65535us; 16448us; 65535us; 16451us; 16453us; 65535us; 65535us; 65535us; 65535us; 16456us; 16458us; |]
let _fsyacc_reductions ()  =    [| 
# 435 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 444 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                       _1 
                   )
# 57 "Parser.fsy"
                 : Absyn.Program));
# 455 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                  _1 
                   )
# 59 "Parser.fsy"
                 : 'prog));
# 466 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                             [] 
                   )
# 61 "Parser.fsy"
                 : 'exps));
# 476 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                               _1 
                   )
# 62 "Parser.fsy"
                 : 'exps));
# 487 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                  [(_1, pos(parseState, 1, 1))] 
                   )
# 64 "Parser.fsy"
                 : 'exps_));
# 498 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                             (_1, pos(parseState, 1, 1)) :: _3 
                   )
# 65 "Parser.fsy"
                 : 'exps_));
# 510 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                                   TypeDec _1 
                   )
# 67 "Parser.fsy"
                 : 'dec));
# 521 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                VarDec _1 
                   )
# 68 "Parser.fsy"
                 : 'dec));
# 532 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                 FunDec _1 
                   )
# 69 "Parser.fsy"
                 : 'dec));
# 543 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                { name = _2; ty = _4; pos = pos(parseState, 1, 4) } 
                   )
# 71 "Parser.fsy"
                 : 'tydec));
# 555 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                     [_1] 
                   )
# 73 "Parser.fsy"
                 : 'tydecs));
# 566 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                      _1 :: _2 
                   )
# 74 "Parser.fsy"
                 : 'tydecs));
# 578 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                SimpleTyId(_1, pos(parseState, 1, 1)) 
                   )
# 76 "Parser.fsy"
                 : 'tyid));
# 589 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                            ArrayTyId _1 
                   )
# 77 "Parser.fsy"
                 : 'tyid));
# 600 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                NameTy(_1, pos(parseState, 1, 1)) 
                   )
# 79 "Parser.fsy"
                 : 'ty));
# 611 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                RecordTy _2 
                   )
# 80 "Parser.fsy"
                 : 'ty));
# 622 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                                              { name = _1; escape = ref true; typ = _3; pos = pos(parseState, 1, 3) } 
                   )
# 82 "Parser.fsy"
                 : 'tyfield));
# 634 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfield)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                          [_1] 
                   )
# 84 "Parser.fsy"
                 : 'tyfields_));
# 645 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfield)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                 _1 :: _3 
                   )
# 85 "Parser.fsy"
                 : 'tyfields_));
# 657 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                 [] 
                   )
# 87 "Parser.fsy"
                 : 'tyfields));
# 667 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                   _1 
                   )
# 88 "Parser.fsy"
                 : 'tyfields));
# 678 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                 { name = _2; escape = ref true; typ = None; init = _4; pos = pos(parseState, 1, 4) } 
                   )
# 90 "Parser.fsy"
                 : 'vardec));
# 690 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                      { name = _2; escape = ref true; typ = Some(_4, pos(parseState, 4, 4)); init = _6; pos = pos(parseState, 1, 6) } 
                   )
# 91 "Parser.fsy"
                 : 'vardec));
# 703 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                                { name = _2; params' = _4; result = None; body = _6; pos = pos(parseState, 1, 6) } 
                   )
# 93 "Parser.fsy"
                 : 'fundec));
# 716 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                                                     { name = _2; params' = _4; result = Some(_7, pos(parseState, 7, 7)); body = _8; pos = pos(parseState, 1, 8) } 
                   )
# 94 "Parser.fsy"
                 : 'fundec));
# 730 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                                       [_1] 
                   )
# 96 "Parser.fsy"
                 : 'fundecs));
# 741 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                        _1 :: _2 
                   )
# 97 "Parser.fsy"
                 : 'fundecs));
# 753 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                                             
                         let rec varexp (left, xs) =
                             match xs with
                             | right :: tail ->
                                 let newleft =
                                     match right with
                                     | Field(varpos, symbol, pos) -> FieldVar((left, varpos), (symbol, pos))
                                     | Subscript(varpos, exp, pos) -> SubscriptVar((left, varpos), (exp, pos))
                                 varexp(newleft, tail)
                             | [] -> left
                         varexp(SimpleVar(_1, pos(parseState, 1, 1)), _2)
                   )
# 99 "Parser.fsy"
                 : 'lvalue));
# 775 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "Parser.fsy"
                                    [] 
                   )
# 112 "Parser.fsy"
                 : 'lvalue_tail));
# 785 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "Parser.fsy"
                                            Field(pos(parseState, 1, 1), _2, pos(parseState, 2, 2)) :: _3 
                   )
# 113 "Parser.fsy"
                 : 'lvalue_tail));
# 797 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "Parser.fsy"
                                                       Subscript(pos(parseState, 1, 1), _2, pos(parseState, 2, 2)) :: _4 
                   )
# 114 "Parser.fsy"
                 : 'lvalue_tail));
# 809 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "Parser.fsy"
                                   VarExp _1 
                   )
# 116 "Parser.fsy"
                 : 'exp));
# 820 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "Parser.fsy"
                              NullExp 
                   )
# 117 "Parser.fsy"
                 : 'exp));
# 830 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                                            SeqExp _2 
                   )
# 118 "Parser.fsy"
                 : 'exp));
# 841 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "Parser.fsy"
                              IntExp 1 
                   )
# 119 "Parser.fsy"
                 : 'exp));
# 851 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                               IntExp 0 
                   )
# 120 "Parser.fsy"
                 : 'exp));
# 861 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                             IntExp _1 
                   )
# 121 "Parser.fsy"
                 : 'exp));
# 872 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "Parser.fsy"
                          
                             match _2 with
                             | IntExp(x) -> IntExp(-x)
                             | x -> NegateExp(x, pos(parseState, 1, 2))
                         
                   )
# 123 "Parser.fsy"
                 : 'exp));
# 887 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                                StringExp _1 
                   )
# 128 "Parser.fsy"
                 : 'exp));
# 898 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                                                     CallExp { func = _1; args = _3; pos = pos(parseState, 1, 4) } 
                   )
# 129 "Parser.fsy"
                 : 'exp));
# 910 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                                      opexp(_1, PlusOp, _3, parseState) 
                   )
# 130 "Parser.fsy"
                 : 'exp));
# 922 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                       opexp(_1, MinusOp, _3, parseState) 
                   )
# 131 "Parser.fsy"
                 : 'exp));
# 934 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "Parser.fsy"
                                       opexp(_1, TimesOp, _3, parseState) 
                   )
# 132 "Parser.fsy"
                 : 'exp));
# 946 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "Parser.fsy"
                                        opexp(_1, DivideOp, _3, parseState) 
                   )
# 133 "Parser.fsy"
                 : 'exp));
# 958 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "Parser.fsy"
                                    opexp(_1, EqOp, _3, parseState) 
                   )
# 134 "Parser.fsy"
                 : 'exp));
# 970 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                                     opexp(_1, NeqOp, _3, parseState) 
                   )
# 135 "Parser.fsy"
                 : 'exp));
# 982 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                    opexp(_1, LtOp, _3, parseState) 
                   )
# 136 "Parser.fsy"
                 : 'exp));
# 994 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                    opexp(_1, LeOp, _3, parseState) 
                   )
# 137 "Parser.fsy"
                 : 'exp));
# 1006 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                    opexp(_1, GtOp, _3, parseState) 
                   )
# 138 "Parser.fsy"
                 : 'exp));
# 1018 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                    opexp(_1, GeOp, _3, parseState) 
                   )
# 139 "Parser.fsy"
                 : 'exp));
# 1030 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                         ifelseexp((_1, pos(parseState, 1, 1)), _3, IntExp 0, pos(parseState, 1, 3)) 
                   )
# 140 "Parser.fsy"
                 : 'exp));
# 1042 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                        ifelseexp((_1, pos(parseState, 1, 1)), IntExp 1, _3, pos(parseState, 1, 3)) 
                   )
# 141 "Parser.fsy"
                 : 'exp));
# 1054 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                                            RecordExp { fields = _4; typ = _2; pos = pos(parseState, 1, 5) } 
                   )
# 142 "Parser.fsy"
                 : 'exp));
# 1066 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                                    ArrayExp { typ = (ArrayTyId _2, pos(parseState, 2, 2)); size = (_4, pos(parseState, 4, 4)); pos = pos(parseState, 1, 5) } 
                   )
# 143 "Parser.fsy"
                 : 'exp));
# 1078 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                           AssignExp { var = _1; exp = _3; pos = pos(parseState, 1, 3) } 
                   )
# 144 "Parser.fsy"
                 : 'exp));
# 1090 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                                           ifelseexp((_3, pos(parseState, 3, 3)), _5, _7, pos(parseState, 1, 7)) 
                   )
# 145 "Parser.fsy"
                 : 'exp));
# 1103 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                                  IfExp { test = (_3, pos(parseState, 3, 3)); then' = _5; else' = None; pos = pos(parseState, 1, 5) } 
                   )
# 146 "Parser.fsy"
                 : 'exp));
# 1115 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                                     WhileExp { test = _3; body = _5; pos = pos(parseState, 1, 5) } 
                   )
# 147 "Parser.fsy"
                 : 'exp));
# 1127 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                                                    ForExp { var = _3; escape = ref true; lo = _5; hi = _7; body = _9; pos = pos(parseState, 1, 9) } 
                   )
# 148 "Parser.fsy"
                 : 'exp));
# 1141 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                               BreakExp(pos(parseState, 1, 1)) 
                   )
# 149 "Parser.fsy"
                 : 'exp));
# 1151 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                           _2 
                   )
# 150 "Parser.fsy"
                 : 'exp));
# 1162 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                             DecExp _1 
                   )
# 151 "Parser.fsy"
                 : 'exp));
# 1173 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                             ErrExp 
                   )
# 152 "Parser.fsy"
                 : 'exp));
# 1183 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                             ErrExp 
                   )
# 153 "Parser.fsy"
                 : 'exp));
# 1193 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                         VoidExp 
                   )
# 154 "Parser.fsy"
                 : 'exp));
# 1203 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                        [_1] 
                   )
# 156 "Parser.fsy"
                 : 'parameters_));
# 1214 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                                               _1 :: _3 
                   )
# 157 "Parser.fsy"
                 : 'parameters_));
# 1226 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                                   [] 
                   )
# 159 "Parser.fsy"
                 : 'parameters));
# 1236 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                     _1 
                   )
# 160 "Parser.fsy"
                 : 'parameters));
# 1247 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                                                   (_1, _3, pos(parseState, 1, 3)) 
                   )
# 162 "Parser.fsy"
                 : 'record_field));
# 1259 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_field)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                                    [_1] 
                   )
# 164 "Parser.fsy"
                 : 'record_fields_));
# 1270 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_field)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                                           _1 :: _3 
                   )
# 165 "Parser.fsy"
                 : 'record_fields_));
# 1282 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                      [] 
                   )
# 167 "Parser.fsy"
                 : 'record_fields));
# 1292 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                        _1 
                   )
# 168 "Parser.fsy"
                 : 'record_fields));
|]
# 1304 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Absyn.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
