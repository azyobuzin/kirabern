// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open System
open Microsoft.FSharp.Text.Parsing
open Absyn

type ParseError =
    { position: Position * Position
      stateStack: int list
      message: string }
let errors = new System.Threading.ThreadLocal<_>(fun x -> new System.Collections.Generic.List<ParseError>())
let clearErrors () = errors.Value.Clear()
let addError e = errors.Value.Add(e)

let parse_error_rich = Some (fun (ctx: ParseErrorContext<_>) ->
    { position = ctx.ParseState.ResultRange
      stateStack = ctx.StateStack
      message = ctx.Message }
    |> addError)

let pos (parseState: IParseState, startIdx, endIdx) =
    (parseState.InputStartPosition startIdx, parseState.InputEndPosition endIdx)

let input<'a> (parseState: IParseState, idx) =
    (Operators.unbox<'a>(parseState.GetInput(idx)), parseState.InputRange(idx))

type ExpsItem =
    | ExpItem of ExpPos
    | StmtItem of ExpPos

type LvalueTail =
    | Field of Symbol
    | Subscript of ExpPos

let opexp (oper, parseState: IParseState) = 
    OpExp { left = downcast (parseState.GetInput(1)), parseState.InputRange(1)
            oper = oper
            right = downcast (parseState.GetInput(3)), parseState.InputRange(3)
            pos = pos (parseState, 1, 3) }

let ifelseexp (test, then', else', pos) =
    IfExp { test = test; then' = then'; else' = Some(else'); pos = pos }

# 49 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | STRING of (string)
  | INT of (int)
  | ID of (string)
  | EOF
  | WHILE
  | FOR
  | TO
  | BREAK
  | VAR
  | FN
  | TYPE
  | NEW
  | IF
  | ELSE
  | NULL
  | TRUE
  | FALSE
  | COMMA
  | COLON
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LBRACK
  | RBRACK
  | LBRACE
  | RBRACE
  | DOT
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | EQ
  | NEQ
  | LT
  | LE
  | GT
  | GE
  | ANDALSO
  | ORELSE
  | ARROW
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_STRING
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_EOF
    | TOKEN_WHILE
    | TOKEN_FOR
    | TOKEN_TO
    | TOKEN_BREAK
    | TOKEN_VAR
    | TOKEN_FN
    | TOKEN_TYPE
    | TOKEN_NEW
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_NULL
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_DOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIVIDE
    | TOKEN_ASSIGN
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_ANDALSO
    | TOKEN_ORELSE
    | TOKEN_ARROW
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_prog
    | NONTERM_exps
    | NONTERM_exps_
    | NONTERM_dec
    | NONTERM_tydec
    | NONTERM_tydecs
    | NONTERM_tyid
    | NONTERM_ty
    | NONTERM_tyfield
    | NONTERM_tyfields_
    | NONTERM_tyfields
    | NONTERM_vardec
    | NONTERM_fundec
    | NONTERM_fundecs
    | NONTERM_lvalue
    | NONTERM_lvalue_tail
    | NONTERM_exp
    | NONTERM_parameters_
    | NONTERM_parameters
    | NONTERM_record_field
    | NONTERM_record_fields_
    | NONTERM_record_fields

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | STRING _ -> 0 
  | INT _ -> 1 
  | ID _ -> 2 
  | EOF  -> 3 
  | WHILE  -> 4 
  | FOR  -> 5 
  | TO  -> 6 
  | BREAK  -> 7 
  | VAR  -> 8 
  | FN  -> 9 
  | TYPE  -> 10 
  | NEW  -> 11 
  | IF  -> 12 
  | ELSE  -> 13 
  | NULL  -> 14 
  | TRUE  -> 15 
  | FALSE  -> 16 
  | COMMA  -> 17 
  | COLON  -> 18 
  | SEMICOLON  -> 19 
  | LPAREN  -> 20 
  | RPAREN  -> 21 
  | LBRACK  -> 22 
  | RBRACK  -> 23 
  | LBRACE  -> 24 
  | RBRACE  -> 25 
  | DOT  -> 26 
  | PLUS  -> 27 
  | MINUS  -> 28 
  | TIMES  -> 29 
  | DIVIDE  -> 30 
  | ASSIGN  -> 31 
  | EQ  -> 32 
  | NEQ  -> 33 
  | LT  -> 34 
  | LE  -> 35 
  | GT  -> 36 
  | GE  -> 37 
  | ANDALSO  -> 38 
  | ORELSE  -> 39 
  | ARROW  -> 40 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_STRING 
  | 1 -> TOKEN_INT 
  | 2 -> TOKEN_ID 
  | 3 -> TOKEN_EOF 
  | 4 -> TOKEN_WHILE 
  | 5 -> TOKEN_FOR 
  | 6 -> TOKEN_TO 
  | 7 -> TOKEN_BREAK 
  | 8 -> TOKEN_VAR 
  | 9 -> TOKEN_FN 
  | 10 -> TOKEN_TYPE 
  | 11 -> TOKEN_NEW 
  | 12 -> TOKEN_IF 
  | 13 -> TOKEN_ELSE 
  | 14 -> TOKEN_NULL 
  | 15 -> TOKEN_TRUE 
  | 16 -> TOKEN_FALSE 
  | 17 -> TOKEN_COMMA 
  | 18 -> TOKEN_COLON 
  | 19 -> TOKEN_SEMICOLON 
  | 20 -> TOKEN_LPAREN 
  | 21 -> TOKEN_RPAREN 
  | 22 -> TOKEN_LBRACK 
  | 23 -> TOKEN_RBRACK 
  | 24 -> TOKEN_LBRACE 
  | 25 -> TOKEN_RBRACE 
  | 26 -> TOKEN_DOT 
  | 27 -> TOKEN_PLUS 
  | 28 -> TOKEN_MINUS 
  | 29 -> TOKEN_TIMES 
  | 30 -> TOKEN_DIVIDE 
  | 31 -> TOKEN_ASSIGN 
  | 32 -> TOKEN_EQ 
  | 33 -> TOKEN_NEQ 
  | 34 -> TOKEN_LT 
  | 35 -> TOKEN_LE 
  | 36 -> TOKEN_GT 
  | 37 -> TOKEN_GE 
  | 38 -> TOKEN_ANDALSO 
  | 39 -> TOKEN_ORELSE 
  | 40 -> TOKEN_ARROW 
  | 43 -> TOKEN_end_of_input
  | 41 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_prog 
    | 3 -> NONTERM_exps 
    | 4 -> NONTERM_exps 
    | 5 -> NONTERM_exps_ 
    | 6 -> NONTERM_exps_ 
    | 7 -> NONTERM_exps_ 
    | 8 -> NONTERM_dec 
    | 9 -> NONTERM_dec 
    | 10 -> NONTERM_dec 
    | 11 -> NONTERM_tydec 
    | 12 -> NONTERM_tydecs 
    | 13 -> NONTERM_tydecs 
    | 14 -> NONTERM_tyid 
    | 15 -> NONTERM_tyid 
    | 16 -> NONTERM_ty 
    | 17 -> NONTERM_ty 
    | 18 -> NONTERM_tyfield 
    | 19 -> NONTERM_tyfields_ 
    | 20 -> NONTERM_tyfields_ 
    | 21 -> NONTERM_tyfields 
    | 22 -> NONTERM_tyfields 
    | 23 -> NONTERM_vardec 
    | 24 -> NONTERM_vardec 
    | 25 -> NONTERM_fundec 
    | 26 -> NONTERM_fundec 
    | 27 -> NONTERM_fundecs 
    | 28 -> NONTERM_fundecs 
    | 29 -> NONTERM_lvalue 
    | 30 -> NONTERM_lvalue_tail 
    | 31 -> NONTERM_lvalue_tail 
    | 32 -> NONTERM_lvalue_tail 
    | 33 -> NONTERM_exp 
    | 34 -> NONTERM_exp 
    | 35 -> NONTERM_exp 
    | 36 -> NONTERM_exp 
    | 37 -> NONTERM_exp 
    | 38 -> NONTERM_exp 
    | 39 -> NONTERM_exp 
    | 40 -> NONTERM_exp 
    | 41 -> NONTERM_exp 
    | 42 -> NONTERM_exp 
    | 43 -> NONTERM_exp 
    | 44 -> NONTERM_exp 
    | 45 -> NONTERM_exp 
    | 46 -> NONTERM_exp 
    | 47 -> NONTERM_exp 
    | 48 -> NONTERM_exp 
    | 49 -> NONTERM_exp 
    | 50 -> NONTERM_exp 
    | 51 -> NONTERM_exp 
    | 52 -> NONTERM_exp 
    | 53 -> NONTERM_exp 
    | 54 -> NONTERM_exp 
    | 55 -> NONTERM_exp 
    | 56 -> NONTERM_exp 
    | 57 -> NONTERM_exp 
    | 58 -> NONTERM_exp 
    | 59 -> NONTERM_exp 
    | 60 -> NONTERM_exp 
    | 61 -> NONTERM_exp 
    | 62 -> NONTERM_exp 
    | 63 -> NONTERM_exp 
    | 64 -> NONTERM_exp 
    | 65 -> NONTERM_exp 
    | 66 -> NONTERM_exp 
    | 67 -> NONTERM_parameters_ 
    | 68 -> NONTERM_parameters_ 
    | 69 -> NONTERM_parameters 
    | 70 -> NONTERM_parameters 
    | 71 -> NONTERM_record_field 
    | 72 -> NONTERM_record_fields_ 
    | 73 -> NONTERM_record_fields_ 
    | 74 -> NONTERM_record_fields 
    | 75 -> NONTERM_record_fields 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 43 
let _fsyacc_tagOfErrorTerminal = 41

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | STRING _ -> "STRING" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 
  | EOF  -> "EOF" 
  | WHILE  -> "WHILE" 
  | FOR  -> "FOR" 
  | TO  -> "TO" 
  | BREAK  -> "BREAK" 
  | VAR  -> "VAR" 
  | FN  -> "FN" 
  | TYPE  -> "TYPE" 
  | NEW  -> "NEW" 
  | IF  -> "IF" 
  | ELSE  -> "ELSE" 
  | NULL  -> "NULL" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | LPAREN  -> "LPAREN" 
  | RPAREN  -> "RPAREN" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | DOT  -> "DOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIVIDE  -> "DIVIDE" 
  | ASSIGN  -> "ASSIGN" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | ANDALSO  -> "ANDALSO" 
  | ORELSE  -> "ORELSE" 
  | ARROW  -> "ARROW" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | WHILE  -> (null : System.Object) 
  | FOR  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | BREAK  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | TYPE  -> (null : System.Object) 
  | NEW  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | NULL  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | ANDALSO  -> (null : System.Object) 
  | ORELSE  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 69us; 70us; 4us; 65535us; 0us; 5us; 7us; 8us; 11us; 12us; 69us; 5us; 36us; 65535us; 0us; 140us; 7us; 140us; 11us; 140us; 27us; 140us; 30us; 140us; 43us; 140us; 46us; 140us; 52us; 140us; 63us; 140us; 69us; 140us; 75us; 140us; 78us; 140us; 106us; 140us; 107us; 140us; 108us; 140us; 109us; 140us; 110us; 140us; 111us; 140us; 112us; 140us; 113us; 140us; 114us; 140us; 115us; 140us; 116us; 140us; 117us; 140us; 123us; 140us; 125us; 140us; 126us; 140us; 127us; 140us; 129us; 140us; 130us; 140us; 134us; 140us; 135us; 140us; 136us; 140us; 138us; 140us; 144us; 140us; 148us; 140us; 37us; 65535us; 0us; 20us; 7us; 20us; 11us; 20us; 20us; 20us; 27us; 20us; 30us; 20us; 43us; 20us; 46us; 20us; 52us; 20us; 63us; 20us; 69us; 20us; 75us; 20us; 78us; 20us; 106us; 20us; 107us; 20us; 108us; 20us; 109us; 20us; 110us; 20us; 111us; 20us; 112us; 20us; 113us; 20us; 114us; 20us; 115us; 20us; 116us; 20us; 117us; 20us; 123us; 20us; 125us; 20us; 126us; 20us; 127us; 20us; 129us; 20us; 130us; 20us; 134us; 20us; 135us; 20us; 136us; 20us; 138us; 20us; 144us; 20us; 148us; 20us; 37us; 65535us; 0us; 13us; 7us; 13us; 11us; 13us; 20us; 21us; 27us; 13us; 30us; 13us; 43us; 13us; 46us; 13us; 52us; 13us; 63us; 13us; 69us; 13us; 75us; 13us; 78us; 13us; 106us; 13us; 107us; 13us; 108us; 13us; 109us; 13us; 110us; 13us; 111us; 13us; 112us; 13us; 113us; 13us; 114us; 13us; 115us; 13us; 116us; 13us; 117us; 13us; 123us; 13us; 125us; 13us; 126us; 13us; 127us; 13us; 129us; 13us; 130us; 13us; 134us; 13us; 135us; 13us; 136us; 13us; 138us; 13us; 144us; 13us; 148us; 13us; 5us; 65535us; 18us; 24us; 36us; 25us; 45us; 26us; 54us; 27us; 118us; 28us; 1us; 65535us; 18us; 19us; 3us; 65535us; 32us; 37us; 38us; 37us; 50us; 37us; 3us; 65535us; 32us; 40us; 38us; 39us; 50us; 40us; 2us; 65535us; 32us; 33us; 50us; 51us; 36us; 65535us; 0us; 14us; 7us; 14us; 11us; 14us; 27us; 14us; 30us; 14us; 43us; 14us; 46us; 14us; 52us; 14us; 63us; 14us; 69us; 14us; 75us; 14us; 78us; 14us; 106us; 14us; 107us; 14us; 108us; 14us; 109us; 14us; 110us; 14us; 111us; 14us; 112us; 14us; 113us; 14us; 114us; 14us; 115us; 14us; 116us; 14us; 117us; 14us; 123us; 14us; 125us; 14us; 126us; 14us; 127us; 14us; 129us; 14us; 130us; 14us; 134us; 14us; 135us; 14us; 136us; 14us; 138us; 14us; 144us; 14us; 148us; 14us; 37us; 65535us; 0us; 56us; 7us; 56us; 11us; 56us; 27us; 56us; 30us; 56us; 43us; 56us; 46us; 56us; 52us; 56us; 56us; 56us; 63us; 56us; 69us; 56us; 75us; 56us; 78us; 56us; 106us; 56us; 107us; 56us; 108us; 56us; 109us; 56us; 110us; 56us; 111us; 56us; 112us; 56us; 113us; 56us; 114us; 56us; 115us; 56us; 116us; 56us; 117us; 56us; 123us; 56us; 125us; 56us; 126us; 56us; 127us; 56us; 129us; 56us; 130us; 56us; 134us; 56us; 135us; 56us; 136us; 56us; 138us; 56us; 144us; 56us; 148us; 56us; 37us; 65535us; 0us; 15us; 7us; 15us; 11us; 15us; 27us; 15us; 30us; 15us; 43us; 15us; 46us; 15us; 52us; 15us; 56us; 57us; 63us; 15us; 69us; 15us; 75us; 15us; 78us; 15us; 106us; 15us; 107us; 15us; 108us; 15us; 109us; 15us; 110us; 15us; 111us; 15us; 112us; 15us; 113us; 15us; 114us; 15us; 115us; 15us; 116us; 15us; 117us; 15us; 123us; 15us; 125us; 15us; 126us; 15us; 127us; 15us; 129us; 15us; 130us; 15us; 134us; 15us; 135us; 15us; 136us; 15us; 138us; 15us; 144us; 15us; 148us; 15us; 36us; 65535us; 0us; 67us; 7us; 67us; 11us; 67us; 27us; 67us; 30us; 67us; 43us; 67us; 46us; 67us; 52us; 67us; 63us; 67us; 69us; 67us; 75us; 67us; 78us; 67us; 106us; 67us; 107us; 67us; 108us; 67us; 109us; 67us; 110us; 67us; 111us; 67us; 112us; 67us; 113us; 67us; 114us; 67us; 115us; 67us; 116us; 67us; 117us; 67us; 123us; 67us; 125us; 67us; 126us; 67us; 127us; 67us; 129us; 67us; 130us; 67us; 134us; 67us; 135us; 67us; 136us; 67us; 138us; 67us; 144us; 67us; 148us; 67us; 3us; 65535us; 58us; 59us; 61us; 62us; 65us; 66us; 36us; 65535us; 0us; 6us; 7us; 6us; 11us; 6us; 27us; 55us; 30us; 93us; 43us; 44us; 46us; 47us; 52us; 53us; 63us; 64us; 69us; 6us; 75us; 76us; 78us; 104us; 106us; 81us; 107us; 82us; 108us; 83us; 109us; 84us; 110us; 85us; 111us; 86us; 112us; 87us; 113us; 88us; 114us; 89us; 115us; 90us; 116us; 91us; 117us; 92us; 123us; 94us; 125us; 95us; 126us; 96us; 127us; 97us; 129us; 98us; 130us; 99us; 134us; 100us; 135us; 101us; 136us; 102us; 138us; 103us; 144us; 104us; 148us; 105us; 2us; 65535us; 78us; 146us; 144us; 145us; 1us; 65535us; 78us; 79us; 2us; 65535us; 119us; 149us; 150us; 149us; 2us; 65535us; 119us; 152us; 150us; 151us; 1us; 65535us; 119us; 120us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 13us; 50us; 88us; 126us; 132us; 134us; 138us; 142us; 145us; 182us; 220us; 258us; 295us; 299us; 336us; 339us; 341us; 344us; 347us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 4us; 14us; 5us; 6us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 1us; 6us; 1us; 6us; 1us; 7us; 2us; 7us; 65us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 11us; 1us; 11us; 1us; 11us; 1us; 11us; 2us; 12us; 13us; 1us; 13us; 1us; 14us; 2us; 14us; 54us; 2us; 15us; 16us; 2us; 15us; 18us; 2us; 15us; 24us; 2us; 15us; 26us; 2us; 15us; 55us; 1us; 15us; 2us; 15us; 55us; 1us; 15us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 2us; 19us; 20us; 1us; 20us; 1us; 20us; 1us; 22us; 2us; 23us; 24us; 2us; 23us; 24us; 1us; 23us; 13us; 23us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 1us; 24us; 1us; 24us; 13us; 24us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 2us; 25us; 26us; 2us; 25us; 26us; 2us; 25us; 26us; 2us; 25us; 26us; 2us; 25us; 26us; 13us; 25us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 1us; 26us; 13us; 26us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 2us; 27us; 28us; 1us; 28us; 2us; 29us; 41us; 1us; 29us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 13us; 32us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 1us; 32us; 1us; 32us; 2us; 33us; 56us; 1us; 34us; 2us; 35us; 65us; 1us; 35us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 13us; 39us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 41us; 13us; 42us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 13us; 42us; 43us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 13us; 42us; 43us; 44us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 13us; 42us; 43us; 44us; 45us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 13us; 42us; 43us; 44us; 45us; 46us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 48us; 49us; 50us; 51us; 52us; 53us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 49us; 50us; 51us; 52us; 53us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 50us; 51us; 52us; 53us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 51us; 52us; 53us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 52us; 53us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 53us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 55us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 56us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 57us; 58us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 57us; 58us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 57us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 59us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 59us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 60us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 60us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 60us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 62us; 14us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 67us; 68us; 13us; 42us; 43us; 44us; 45us; 46us; 47us; 48us; 49us; 50us; 51us; 52us; 53us; 71us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 2us; 54us; 55us; 1us; 54us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 56us; 2us; 57us; 58us; 2us; 57us; 58us; 2us; 57us; 58us; 1us; 57us; 1us; 59us; 1us; 59us; 1us; 59us; 1us; 60us; 1us; 60us; 1us; 60us; 1us; 60us; 1us; 60us; 1us; 60us; 1us; 61us; 2us; 62us; 64us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 64us; 1us; 65us; 1us; 68us; 1us; 68us; 1us; 70us; 1us; 71us; 1us; 71us; 2us; 72us; 73us; 1us; 73us; 1us; 73us; 1us; 75us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 27us; 29us; 31us; 33us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 57us; 59us; 61us; 64us; 67us; 70us; 73us; 76us; 79us; 81us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 99us; 101us; 103us; 105us; 108us; 111us; 113us; 127us; 129us; 131us; 145us; 148us; 151us; 154us; 157us; 160us; 174us; 176us; 190us; 193us; 195us; 198us; 200us; 202us; 204us; 206us; 208us; 222us; 224us; 226us; 229us; 231us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 260us; 262us; 264us; 266us; 268us; 282us; 296us; 310us; 324us; 338us; 352us; 366us; 380us; 394us; 408us; 422us; 436us; 450us; 464us; 479us; 494us; 508us; 522us; 536us; 550us; 564us; 578us; 592us; 607us; 621us; 623us; 625us; 627us; 629us; 631us; 633us; 635us; 637us; 639us; 641us; 643us; 645us; 648us; 650us; 652us; 654us; 656us; 658us; 661us; 664us; 667us; 669us; 671us; 673us; 675us; 677us; 679us; 681us; 683us; 685us; 687us; 689us; 692us; 694us; 696us; 698us; 700us; 702us; 704us; 706us; 708us; 710us; 712us; 715us; 717us; 719us; |]
let _fsyacc_action_rows = 153
let _fsyacc_actionTableElements = [|30us; 16387us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 19us; 16450us; 20us; 138us; 24us; 69us; 27us; 16450us; 28us; 75us; 29us; 16450us; 30us; 16450us; 32us; 16450us; 33us; 16450us; 34us; 16450us; 35us; 16450us; 36us; 16450us; 37us; 16450us; 38us; 16450us; 39us; 16450us; 41us; 9us; 0us; 49152us; 1us; 32768us; 3us; 3us; 0us; 16385us; 0us; 16386us; 0us; 16388us; 13us; 16389us; 19us; 7us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 18us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 41us; 9us; 0us; 16390us; 1us; 32768us; 19us; 11us; 2us; 32768us; 19us; 11us; 25us; 143us; 18us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 41us; 9us; 0us; 16391us; 0us; 16392us; 0us; 16393us; 0us; 16394us; 1us; 32768us; 2us; 17us; 1us; 32768us; 31us; 18us; 2us; 32768us; 2us; 22us; 24us; 32us; 0us; 16395us; 1us; 16396us; 10us; 16us; 0us; 16397us; 0us; 16398us; 1us; 16398us; 24us; 119us; 1us; 16400us; 22us; 29us; 1us; 16402us; 22us; 29us; 2us; 32768us; 22us; 29us; 31us; 46us; 18us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 22us; 29us; 24us; 69us; 28us; 75us; 1us; 32768us; 22us; 30us; 1us; 32768us; 23us; 31us; 18us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 23us; 31us; 24us; 69us; 28us; 75us; 0us; 16399us; 1us; 16405us; 2us; 35us; 1us; 32768us; 25us; 34us; 0us; 16401us; 1us; 32768us; 18us; 36us; 1us; 32768us; 2us; 22us; 1us; 16403us; 17us; 38us; 1us; 32768us; 2us; 35us; 0us; 16404us; 0us; 16406us; 1us; 32768us; 2us; 42us; 2us; 32768us; 18us; 45us; 31us; 43us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 12us; 16407us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 1us; 32768us; 2us; 22us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 12us; 16408us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 1us; 32768us; 2us; 49us; 1us; 32768us; 20us; 50us; 1us; 16405us; 2us; 35us; 1us; 32768us; 21us; 52us; 18us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 40us; 54us; 12us; 16409us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 1us; 32768us; 2us; 22us; 12us; 16410us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 1us; 16411us; 9us; 48us; 0us; 16412us; 3us; 16414us; 20us; 78us; 22us; 63us; 26us; 60us; 0us; 16413us; 1us; 32768us; 2us; 61us; 2us; 16414us; 22us; 63us; 26us; 60us; 0us; 16415us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 13us; 32768us; 23us; 65us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 2us; 16414us; 22us; 63us; 26us; 60us; 0us; 16416us; 1us; 16417us; 31us; 123us; 0us; 16418us; 30us; 16387us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 19us; 16450us; 20us; 138us; 24us; 69us; 27us; 16450us; 28us; 75us; 29us; 16450us; 30us; 16450us; 32us; 16450us; 33us; 16450us; 34us; 16450us; 35us; 16450us; 36us; 16450us; 37us; 16450us; 38us; 16450us; 39us; 16450us; 41us; 10us; 1us; 32768us; 25us; 71us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 0us; 16422us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 0us; 16423us; 0us; 16424us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 1us; 32768us; 21us; 80us; 0us; 16425us; 2us; 16426us; 29us; 108us; 30us; 109us; 2us; 16427us; 29us; 108us; 30us; 109us; 0us; 16428us; 0us; 16429us; 10us; 16430us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 10us; 16431us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 10us; 16432us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 10us; 16433us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 10us; 16434us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 10us; 16435us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 12us; 16436us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 12us; 16437us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 13us; 32768us; 23us; 122us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 12us; 16440us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 13us; 32768us; 21us; 126us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 13us; 16442us; 13us; 127us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 12us; 16441us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 13us; 32768us; 21us; 130us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 12us; 16443us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 13us; 32768us; 6us; 135us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 13us; 32768us; 21us; 136us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 12us; 16444us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 13us; 32768us; 21us; 139us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 13us; 16451us; 17us; 144us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 12us; 16455us; 27us; 106us; 28us; 107us; 29us; 108us; 30us; 109us; 32us; 110us; 33us; 111us; 34us; 112us; 35us; 113us; 36us; 114us; 37us; 115us; 38us; 116us; 39us; 117us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 1us; 32768us; 2us; 23us; 1us; 16458us; 2us; 147us; 1us; 32768us; 25us; 121us; 0us; 16438us; 0us; 16439us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 1us; 32768us; 20us; 125us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 1us; 32768us; 20us; 129us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 1us; 32768us; 20us; 132us; 1us; 32768us; 2us; 133us; 1us; 32768us; 31us; 134us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 0us; 16445us; 18us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 41us; 141us; 0us; 16446us; 0us; 16447us; 1us; 32768us; 21us; 142us; 0us; 16448us; 0us; 16449us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 0us; 16452us; 0us; 16454us; 1us; 32768us; 31us; 148us; 17us; 16450us; 0us; 77us; 1us; 74us; 2us; 58us; 4us; 128us; 5us; 131us; 7us; 137us; 8us; 41us; 9us; 48us; 10us; 16us; 11us; 118us; 12us; 124us; 14us; 68us; 15us; 72us; 16us; 73us; 20us; 138us; 24us; 69us; 28us; 75us; 1us; 16456us; 17us; 150us; 1us; 32768us; 2us; 147us; 0us; 16457us; 0us; 16459us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 31us; 32us; 34us; 35us; 36us; 37us; 51us; 70us; 71us; 73us; 76us; 95us; 96us; 97us; 98us; 99us; 101us; 103us; 106us; 107us; 109us; 110us; 111us; 113us; 115us; 117us; 120us; 139us; 141us; 143us; 162us; 163us; 165us; 167us; 168us; 170us; 172us; 174us; 176us; 177us; 178us; 180us; 183us; 201us; 214us; 216us; 234us; 247us; 249us; 251us; 253us; 255us; 274us; 287us; 289us; 302us; 304us; 305us; 309us; 310us; 312us; 315us; 316us; 334us; 348us; 351us; 352us; 354us; 355us; 386us; 388us; 389us; 390us; 391us; 392us; 410us; 411us; 412us; 430us; 432us; 433us; 436us; 439us; 440us; 441us; 452us; 463us; 474us; 485us; 496us; 507us; 520us; 533us; 547us; 560us; 574us; 588us; 601us; 615us; 628us; 642us; 656us; 669us; 683us; 697us; 710us; 728us; 746us; 764us; 782us; 800us; 818us; 836us; 854us; 872us; 890us; 908us; 926us; 928us; 930us; 932us; 933us; 934us; 952us; 954us; 972us; 990us; 1008us; 1010us; 1028us; 1046us; 1048us; 1050us; 1052us; 1070us; 1088us; 1106us; 1107us; 1126us; 1127us; 1128us; 1130us; 1131us; 1132us; 1150us; 1151us; 1152us; 1154us; 1172us; 1174us; 1176us; 1177us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 0us; 1us; 1us; 3us; 3us; 1us; 1us; 1us; 4us; 1us; 2us; 1us; 3us; 1us; 3us; 3us; 1us; 3us; 0us; 1us; 4us; 6us; 6us; 8us; 1us; 2us; 2us; 0us; 3us; 4us; 1us; 1us; 3us; 1us; 1us; 1us; 2us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 5us; 5us; 3us; 7us; 5us; 5us; 9us; 1us; 3us; 1us; 3us; 3us; 0us; 1us; 3us; 0us; 1us; 3us; 1us; 3us; 0us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 4us; 4us; 5us; 5us; 5us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 11us; 11us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 16us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 21us; 22us; 22us; 23us; 23us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 16388us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 16391us; 16392us; 16393us; 16394us; 65535us; 65535us; 65535us; 16395us; 65535us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 65535us; 16404us; 16406us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 16413us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 16416us; 65535us; 16418us; 65535us; 65535us; 16419us; 16420us; 16421us; 16422us; 65535us; 65535us; 16424us; 65535us; 65535us; 16425us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16438us; 16439us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16445us; 65535us; 16446us; 16447us; 65535us; 16448us; 16449us; 65535us; 16452us; 16454us; 65535us; 65535us; 65535us; 65535us; 16457us; 16459us; |]
let _fsyacc_reductions ()  =    [| 
# 442 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.Program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 451 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                       _1 
                   )
# 63 "Parser.fsy"
                 : Absyn.Program));
# 462 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                  _1 
                   )
# 65 "Parser.fsy"
                 : 'prog));
# 473 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "Parser.fsy"
                             [] 
                   )
# 67 "Parser.fsy"
                 : 'exps));
# 483 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                               _1 
                   )
# 68 "Parser.fsy"
                 : 'exps));
# 494 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                  [input(parseState, 1)] 
                   )
# 70 "Parser.fsy"
                 : 'exps_));
# 505 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                             input(parseState, 1) :: _3 
                   )
# 71 "Parser.fsy"
                 : 'exps_));
# 517 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                               (ErrExp, parseState.InputRange(1)) :: _3 
                   )
# 72 "Parser.fsy"
                 : 'exps_));
# 528 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                   TypeDec _1 
                   )
# 74 "Parser.fsy"
                 : 'dec));
# 539 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'vardec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                VarDec _1 
                   )
# 75 "Parser.fsy"
                 : 'dec));
# 550 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                 FunDec _1 
                   )
# 76 "Parser.fsy"
                 : 'dec));
# 561 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'ty)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                { name = _2; ty = _4; pos = pos(parseState, 1, 4) } 
                   )
# 78 "Parser.fsy"
                 : 'tydec));
# 573 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                     [_1] 
                   )
# 80 "Parser.fsy"
                 : 'tydecs));
# 584 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tydecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                      _1 :: _2 
                   )
# 81 "Parser.fsy"
                 : 'tydecs));
# 596 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "Parser.fsy"
                                SimpleTyId(input(parseState, 1)) 
                   )
# 83 "Parser.fsy"
                 : 'tyid));
# 607 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                            ArrayTyId(input(parseState, 1)) 
                   )
# 84 "Parser.fsy"
                 : 'tyid));
# 618 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                NameTy(input(parseState, 1)) 
                   )
# 86 "Parser.fsy"
                 : 'ty));
# 629 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "Parser.fsy"
                                                RecordTy _2 
                   )
# 87 "Parser.fsy"
                 : 'ty));
# 640 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                              { name = _1; escape = ref true; typ = input(parseState, 3); pos = pos(parseState, 1, 3) } 
                   )
# 89 "Parser.fsy"
                 : 'tyfield));
# 652 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfield)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                          [_1] 
                   )
# 91 "Parser.fsy"
                 : 'tyfields_));
# 663 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfield)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                 _1 :: _3 
                   )
# 92 "Parser.fsy"
                 : 'tyfields_));
# 675 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "Parser.fsy"
                                 [] 
                   )
# 94 "Parser.fsy"
                 : 'tyfields));
# 685 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "Parser.fsy"
                                   _1 
                   )
# 95 "Parser.fsy"
                 : 'tyfields));
# 696 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "Parser.fsy"
                                                 { name = _2; escape = ref true; typ = None; init = _4; pos = pos(parseState, 1, 4) } 
                   )
# 97 "Parser.fsy"
                 : 'vardec));
# 708 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "Parser.fsy"
                                                      { name = _2; escape = ref true; typ = Some(input(parseState, 4)); init = _6; pos = pos(parseState, 1, 6) } 
                   )
# 98 "Parser.fsy"
                 : 'vardec));
# 721 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "Parser.fsy"
                                                                { name = _2; params' = _4; result = None; body = _6; pos = pos(parseState, 1, 6) } 
                   )
# 100 "Parser.fsy"
                 : 'fundec));
# 734 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyfields)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "Parser.fsy"
                                                                     { name = _2; params' = _4; result = Some(input(parseState, 7)); body = _8; pos = pos(parseState, 1, 8) } 
                   )
# 101 "Parser.fsy"
                 : 'fundec));
# 748 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "Parser.fsy"
                                       [_1] 
                   )
# 103 "Parser.fsy"
                 : 'fundecs));
# 759 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundec)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'fundecs)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "Parser.fsy"
                                        _1 :: _2 
                   )
# 104 "Parser.fsy"
                 : 'fundecs));
# 771 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                                             
                         let startPos = parseState.InputStartPosition(1)
                         let rec varexp (left, xs) =
                             match xs with
                             | right :: tail ->
                                 let newleft =
                                     match right with
                                     | Field((_, (p, _)) as symbol) -> FieldVar((left, (startPos, p)), symbol)
                                     | Subscript((_, (p, _)) as exp) -> SubscriptVar((left, (startPos, p)), exp)
                                 varexp(newleft, tail)
                             | [] -> left
                         varexp(SimpleVar(_1, parseState.InputRange(1)), _2)
                   )
# 106 "Parser.fsy"
                 : 'lvalue));
# 794 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "Parser.fsy"
                                    [] 
                   )
# 120 "Parser.fsy"
                 : 'lvalue_tail));
# 804 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "Parser.fsy"
                                            Field(input(parseState, 2)) :: _3 
                   )
# 121 "Parser.fsy"
                 : 'lvalue_tail));
# 816 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue_tail)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                                                       Subscript(input(parseState, 2)) :: _4 
                   )
# 122 "Parser.fsy"
                 : 'lvalue_tail));
# 828 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "Parser.fsy"
                                   VarExp _1 
                   )
# 124 "Parser.fsy"
                 : 'exp));
# 839 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "Parser.fsy"
                              NullExp 
                   )
# 125 "Parser.fsy"
                 : 'exp));
# 849 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                                            SeqExp _2 
                   )
# 126 "Parser.fsy"
                 : 'exp));
# 860 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "Parser.fsy"
                              IntExp 1 
                   )
# 127 "Parser.fsy"
                 : 'exp));
# 870 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "Parser.fsy"
                               IntExp 0 
                   )
# 128 "Parser.fsy"
                 : 'exp));
# 880 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "Parser.fsy"
                             IntExp _1 
                   )
# 129 "Parser.fsy"
                 : 'exp));
# 891 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                          
                             match _2 with
                             | IntExp(x) -> IntExp(-x)
                             | x -> NegateExp(x, pos(parseState, 1, 2))
                         
                   )
# 131 "Parser.fsy"
                 : 'exp));
# 906 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "Parser.fsy"
                                StringExp _1 
                   )
# 136 "Parser.fsy"
                 : 'exp));
# 917 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                                                     CallExp { func = input(parseState, 1); args = _3; pos = pos(parseState, 1, 4) } 
                   )
# 137 "Parser.fsy"
                 : 'exp));
# 929 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "Parser.fsy"
                                      opexp(PlusOp, parseState) 
                   )
# 138 "Parser.fsy"
                 : 'exp));
# 941 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "Parser.fsy"
                                       opexp(MinusOp, parseState) 
                   )
# 139 "Parser.fsy"
                 : 'exp));
# 953 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                       opexp(TimesOp, parseState) 
                   )
# 140 "Parser.fsy"
                 : 'exp));
# 965 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "Parser.fsy"
                                        opexp(DivideOp, parseState) 
                   )
# 141 "Parser.fsy"
                 : 'exp));
# 977 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "Parser.fsy"
                                    opexp(EqOp, parseState) 
                   )
# 142 "Parser.fsy"
                 : 'exp));
# 989 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "Parser.fsy"
                                     opexp(NeqOp, parseState) 
                   )
# 143 "Parser.fsy"
                 : 'exp));
# 1001 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "Parser.fsy"
                                    opexp(LtOp, parseState) 
                   )
# 144 "Parser.fsy"
                 : 'exp));
# 1013 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "Parser.fsy"
                                    opexp(LeOp, parseState) 
                   )
# 145 "Parser.fsy"
                 : 'exp));
# 1025 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "Parser.fsy"
                                    opexp(GtOp, parseState) 
                   )
# 146 "Parser.fsy"
                 : 'exp));
# 1037 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "Parser.fsy"
                                    opexp(GeOp, parseState) 
                   )
# 147 "Parser.fsy"
                 : 'exp));
# 1049 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "Parser.fsy"
                                         ifelseexp(input(parseState, 1), _3, IntExp 0, pos(parseState, 1, 3)) 
                   )
# 148 "Parser.fsy"
                 : 'exp));
# 1061 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "Parser.fsy"
                                        ifelseexp(input(parseState, 1), IntExp 1, _3, pos(parseState, 1, 3)) 
                   )
# 149 "Parser.fsy"
                 : 'exp));
# 1073 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 150 "Parser.fsy"
                                                            RecordExp { fields = _4; typ = _2, pos(parseState, 2, 2); pos = pos(parseState, 1, 5) } 
                   )
# 150 "Parser.fsy"
                 : 'exp));
# 1085 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'tyid)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "Parser.fsy"
                                                    ArrayExp { typ = ArrayTyId(input(parseState, 2)); size = (_4, pos(parseState, 4, 4)); pos = pos(parseState, 1, 5) } 
                   )
# 151 "Parser.fsy"
                 : 'exp));
# 1097 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'lvalue)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "Parser.fsy"
                                           AssignExp { var = _1; exp = _3; pos = pos(parseState, 1, 3) } 
                   )
# 152 "Parser.fsy"
                 : 'exp));
# 1109 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "Parser.fsy"
                                                           ifelseexp((_3, pos(parseState, 3, 3)), _5, _7, pos(parseState, 1, 7)) 
                   )
# 153 "Parser.fsy"
                 : 'exp));
# 1122 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 154 "Parser.fsy"
                                                  IfExp { test = (_3, pos(parseState, 3, 3)); then' = _5; else' = None; pos = pos(parseState, 1, 5) } 
                   )
# 154 "Parser.fsy"
                 : 'exp));
# 1134 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "Parser.fsy"
                                                     WhileExp { test = input(parseState, 3); body = _5; pos = pos(parseState, 1, 5) } 
                   )
# 155 "Parser.fsy"
                 : 'exp));
# 1146 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _9 = (let data = parseState.GetInput(9) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "Parser.fsy"
                                                                    ForExp { var = _3; escape = ref true; lo = _5; hi = _7; body = _9; pos = pos(parseState, 1, 9) } 
                   )
# 156 "Parser.fsy"
                 : 'exp));
# 1160 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "Parser.fsy"
                               BreakExp(parseState.InputRange(1)) 
                   )
# 157 "Parser.fsy"
                 : 'exp));
# 1170 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "Parser.fsy"
                                           _2 
                   )
# 158 "Parser.fsy"
                 : 'exp));
# 1181 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'dec)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "Parser.fsy"
                             DecExp _1 
                   )
# 159 "Parser.fsy"
                 : 'exp));
# 1192 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "Parser.fsy"
                                             ErrExp 
                   )
# 160 "Parser.fsy"
                 : 'exp));
# 1202 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "Parser.fsy"
                                             ErrExp 
                   )
# 161 "Parser.fsy"
                 : 'exp));
# 1212 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "Parser.fsy"
                         VoidExp 
                   )
# 162 "Parser.fsy"
                 : 'exp));
# 1222 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "Parser.fsy"
                                        [input(parseState, 1)] 
                   )
# 164 "Parser.fsy"
                 : 'parameters_));
# 1233 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "Parser.fsy"
                                               input(parseState, 1) :: _3 
                   )
# 165 "Parser.fsy"
                 : 'parameters_));
# 1245 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "Parser.fsy"
                                   [] 
                   )
# 167 "Parser.fsy"
                 : 'parameters));
# 1255 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'parameters_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "Parser.fsy"
                                     _1 
                   )
# 168 "Parser.fsy"
                 : 'parameters));
# 1266 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'exp)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                                   input(parseState, 1), input(parseState, 3) 
                   )
# 170 "Parser.fsy"
                 : 'record_field));
# 1278 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_field)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "Parser.fsy"
                                                    [_1] 
                   )
# 172 "Parser.fsy"
                 : 'record_fields_));
# 1289 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_field)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "Parser.fsy"
                                                           _1 :: _3 
                   )
# 173 "Parser.fsy"
                 : 'record_fields_));
# 1301 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                      [] 
                   )
# 175 "Parser.fsy"
                 : 'record_fields));
# 1311 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'record_fields_)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                                        _1 
                   )
# 176 "Parser.fsy"
                 : 'record_fields));
|]
# 1323 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 44;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Absyn.Program =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
